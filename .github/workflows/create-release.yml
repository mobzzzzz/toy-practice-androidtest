name: Create Release

on:
  workflow_call:
    inputs:
      tag_name:
        description: 'Tag name for the release'
        required: true
        type: string
      artifact_name:
        description: 'Name of the artifact to download'
        required: true
        type: string
      release_type:
        description: 'Type of release (production or beta)'
        required: true
        type: string
      version_code:
        description: 'Version code for the release'
        required: true
        type: string
      previous_beta_tag:
        description: 'Previous beta tag (for beta releases only)'
        required: false
        type: string
        default: ''
      has_previous_beta:
        description: 'Whether there is a previous beta release'
        required: false
        type: string
        default: 'false'
    secrets:
      APP_ID:
        required: true
      APP_PRIVATE_KEY:
        required: true

jobs:
  create-release:
    name: Create ${{ inputs.release_type == 'beta' && 'Beta' || 'Production' }} Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Generate GitHub App Token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.tag_name }}
          fetch-depth: 0
          token: ${{ steps.app-token.outputs.token }}
        
      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.artifact_name }}
          path: artifacts

      - name: Get Latest Version Code (Beta Only)
        if: inputs.release_type == 'beta'
        id: get-latest-version-code
        uses: actions/github-script@v7
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            // ÏµúÏã† VERSION_CODE Îã§Ïãú ÏùΩÍ∏∞ (main Î®∏ÏßÄÎ°ú Ïù∏Ìïú Î≥ÄÍ≤Ω Î∞òÏòÅ)
            const { data: variable } = await github.rest.actions.getRepoVariable({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'VERSION_CODE'
            });
            
            const latestVersionCode = variable.value;
            const originalVersionCode = '${{ inputs.version_code }}';
            
            console.log(`Original version code: ${originalVersionCode}`);
            console.log(`Latest version code: ${latestVersionCode}`);
            
            if (originalVersionCode !== latestVersionCode) {
              console.log(`‚ö†Ô∏è Version code changed during workflow execution!`);
              console.log(`Using latest version code: ${latestVersionCode}`);
            } else {
              console.log(`‚úÖ Version code unchanged: ${latestVersionCode}`);
            }
            
            core.setOutput('latest_version_code', latestVersionCode);
            core.setOutput('version_changed', originalVersionCode !== latestVersionCode);

      - name: Get Previous Beta Release Notes (Beta Only)
        if: inputs.release_type == 'beta' && inputs.has_previous_beta == 'true'
        id: get-previous-notes
        run: |
          previous_beta="${{ inputs.previous_beta_tag }}"
          
          echo "Ïù¥Ï†Ñ Î≤†ÌÉÄ Î¶¥Î¶¨Ï¶à ÎÖ∏Ìä∏ Í∞ÄÏ†∏Ïò§Îäî Ï§ë: $previous_beta"
          
          # GitHub APIÎ•º ÌÜµÌï¥ Ïù¥Ï†Ñ Î¶¥Î¶¨Ï¶à Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
          api_response=$(curl -s -w "HTTPSTATUS:%{http_code}" \
            -H "Authorization: token ${{ steps.app-token.outputs.token }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/$previous_beta")
          
          http_code=$(echo "$api_response" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
          response_body=$(echo "$api_response" | sed -e 's/HTTPSTATUS:.*//g')
          
          echo "API HTTP ÏÉÅÌÉú ÏΩîÎìú: $http_code"
          
          if [ "$http_code" = "200" ]; then
            previous_notes=$(echo "$response_body" | jq -r '.body // empty')
            release_id=$(echo "$response_body" | jq -r '.id // empty')
            
            echo "Î¶¥Î¶¨Ï¶à ID: $release_id"
            echo "Î¶¥Î¶¨Ï¶à ÎÖ∏Ìä∏ Í∏∏Ïù¥: ${#previous_notes}"
            
            # Î¶¥Î¶¨Ï¶à IDÎ•º Ï†ÄÏû• (ÏÇ≠Ï†úÏö©)
            echo "release_id=$release_id" >> $GITHUB_OUTPUT
            
            if [ ! -z "$previous_notes" ] && [ "$previous_notes" != "null" ] && [ "$previous_notes" != "empty" ]; then
              # Î≥ÄÍ≤Ω ÏÇ¨Ìï≠ Î∂ÄÎ∂ÑÎßå Ï∂îÏ∂ú (Ìó§Îçî Ï†úÏô∏)
              changes=$(echo "$previous_notes" | sed -n '/^- /p' | head -20)
              if [ ! -z "$changes" ]; then
                echo "previous_changes<<EOF" >> $GITHUB_OUTPUT
                echo "$changes" >> $GITHUB_OUTPUT
                echo "EOF" >> $GITHUB_OUTPUT
                echo "has_changes=true" >> $GITHUB_OUTPUT
                echo "Ïù¥Ï†Ñ Î¶¥Î¶¨Ï¶à ÎÖ∏Ìä∏ Í∞ÄÏ†∏Ïò§Í∏∞ ÏôÑÎ£å (${#changes} Î¨∏Ïûê)"
              else
                echo "has_changes=false" >> $GITHUB_OUTPUT
                echo "Ïù¥Ï†Ñ Î¶¥Î¶¨Ï¶à ÎÖ∏Ìä∏Ïóê Î≥ÄÍ≤ΩÏÇ¨Ìï≠Ïù¥ ÏóÜÏùå"
              fi
            else
              echo "has_changes=false" >> $GITHUB_OUTPUT
              echo "Ïù¥Ï†Ñ Î¶¥Î¶¨Ï¶à ÎÖ∏Ìä∏Í∞Ä ÎπÑÏñ¥ÏûàÏùå"
            fi
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "release_id=" >> $GITHUB_OUTPUT
            echo "Ïù¥Ï†Ñ Î≤†ÌÉÄ Î¶¥Î¶¨Ï¶àÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏùå ÎòêÎäî API Ïò§Î•ò: HTTP $http_code"
          fi

      - name: Delete Previous Beta Release (Beta Only)
        if: inputs.release_type == 'beta' && inputs.has_previous_beta == 'true'
        run: |
          previous_beta="${{ inputs.previous_beta_tag }}"
          release_id="${{ steps.get-previous-notes.outputs.release_id }}"
          
          echo "Ïù¥Ï†Ñ Î≤†ÌÉÄ Î¶¥Î¶¨Ï¶à ÏÇ≠Ï†ú Ï§ë: $previous_beta"
          echo "ÏÇ¨Ïö©Ìï† Î¶¥Î¶¨Ï¶à ID: $release_id"
          
          # Ïù¥Ï†Ñ Ïä§ÌÖùÏóêÏÑú Í∞ÄÏ†∏Ïò® Î¶¥Î¶¨Ï¶à ID ÏÇ¨Ïö©
          if [ ! -z "$release_id" ] && [ "$release_id" != "null" ] && [ "$release_id" != "empty" ]; then
            echo "Î¶¥Î¶¨Ï¶à ID $release_id ÏÇ≠Ï†ú ÏãúÎèÑ Ï§ë..."
            
            delete_response=$(curl -s -w "HTTPSTATUS:%{http_code}" \
              -X DELETE \
              -H "Authorization: token ${{ steps.app-token.outputs.token }}" \
              "https://api.github.com/repos/${{ github.repository }}/releases/$release_id")
            
            delete_http_code=$(echo "$delete_response" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
            
            echo "ÏÇ≠Ï†ú API HTTP ÏÉÅÌÉú ÏΩîÎìú: $delete_http_code"
            
            if [ "$delete_http_code" = "204" ]; then
              echo "‚úÖ Ïù¥Ï†Ñ Î≤†ÌÉÄ Î¶¥Î¶¨Ï¶à ÏÇ≠Ï†ú ÏôÑÎ£å: $release_id"
              
              # Î¶¥Î¶¨Ï¶à ÏÇ≠Ï†ú ÏÑ±Í≥µ ÌõÑ ÌÉúÍ∑∏ÎèÑ ÏÇ≠Ï†ú
              echo "Ïù¥Ï†Ñ Î≤†ÌÉÄ ÌÉúÍ∑∏ ÏÇ≠Ï†ú Ï§ë: $previous_beta"
              git tag -d "$previous_beta" 2>/dev/null || echo "Î°úÏª¨ ÌÉúÍ∑∏Í∞Ä ÏóÜÍ±∞ÎÇò Ïù¥ÎØ∏ ÏÇ≠Ï†úÎê®"
              git push origin ":refs/tags/$previous_beta" 2>/dev/null || echo "ÏõêÍ≤© ÌÉúÍ∑∏Í∞Ä ÏóÜÍ±∞ÎÇò Ïù¥ÎØ∏ ÏÇ≠Ï†úÎê®"
              echo "‚úÖ Ïù¥Ï†Ñ Î≤†ÌÉÄ ÌÉúÍ∑∏ ÏÇ≠Ï†ú ÏôÑÎ£å: $previous_beta"
            else
              echo "‚ùå Î¶¥Î¶¨Ï¶à ÏÇ≠Ï†ú Ïã§Ìå®: HTTP $delete_http_code"
              echo "üîç ÏùëÎãµ ÎÇ¥Ïö©: $delete_response"
              echo "‚ö†Ô∏è Ïù¥Ï†Ñ Î≤†ÌÉÄ Î¶¥Î¶¨Ï¶à ÏÇ≠Ï†úÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§."
              echo "üí° ÏàòÎèôÏúºÎ°ú Î¶¥Î¶¨Ï¶à $previous_beta (ID: $release_id)Î•º ÏÇ≠Ï†úÌï¥Ï£ºÏÑ∏Ïöî."
              
              # ÏÇ≠Ï†ú Ïã§Ìå® ÏãúÏóêÎèÑ Í≥ÑÏÜç ÏßÑÌñâ (ÏÉà Î¶¥Î¶¨Ï¶à ÏÉùÏÑ±ÏùÄ Í∞ÄÎä•)
              echo "üîÑ ÏÉàÎ°úÏö¥ Î≤†ÌÉÄ Î¶¥Î¶¨Ï¶à ÏÉùÏÑ±ÏùÑ Í≥ÑÏÜç ÏßÑÌñâÌï©ÎãàÎã§..."
            fi
          else
            echo "‚ö†Ô∏è Ïú†Ìö®Ìïú Î¶¥Î¶¨Ï¶à IDÍ∞Ä ÏóÜÏùå - ÌÉúÍ∑∏Îßå ÏÇ≠Ï†ú ÏãúÎèÑ"
            git tag -d "$previous_beta" 2>/dev/null || echo "Î°úÏª¨ ÌÉúÍ∑∏Í∞Ä ÏóÜÍ±∞ÎÇò Ïù¥ÎØ∏ ÏÇ≠Ï†úÎê®"
            git push origin ":refs/tags/$previous_beta" 2>/dev/null || echo "ÏõêÍ≤© ÌÉúÍ∑∏Í∞Ä ÏóÜÍ±∞ÎÇò Ïù¥ÎØ∏ ÏÇ≠Ï†úÎê®"
            echo "‚úÖ ÌÉúÍ∑∏ ÏÇ≠Ï†ú ÏôÑÎ£å: $previous_beta"
          fi

      - name: Generate Beta Release Notes
        if: inputs.release_type == 'beta'
        run: |
          TAG_NAME="${{ inputs.tag_name }}"
          VERSION="${TAG_NAME#v}"
          LATEST_VERSION_CODE="${{ steps.get-latest-version-code.outputs.latest_version_code || inputs.version_code }}"
          VERSION_CHANGED="${{ steps.get-latest-version-code.outputs.version_changed }}"
          PREVIOUS_BETA="${{ inputs.previous_beta_tag }}"
          HAS_PREVIOUS_BETA="${{ inputs.has_previous_beta }}"
          
          echo "## Î≤†ÌÉÄ Î¶¥Î¶¨Ï¶à ÎÖ∏Ìä∏" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "**Î≤ÑÏ†Ñ**: $VERSION" >> CHANGELOG.md
          echo "**Version Code**: $LATEST_VERSION_CODE" >> CHANGELOG.md
          
          if [[ "$VERSION_CHANGED" == "true" ]]; then
            echo "**‚ö†Ô∏è Ï∞∏Í≥†**: ÏõåÌÅ¨ÌîåÎ°úÏö∞ Ïã§Ìñâ Ï§ë Version CodeÍ∞Ä ÏóÖÎç∞Ïù¥Ìä∏ÎêòÏñ¥ ÏµúÏã† Í∞íÏùÑ ÏÇ¨Ïö©Ìï©ÎãàÎã§." >> CHANGELOG.md
          fi
          
          echo "" >> CHANGELOG.md
          echo "### Î≥ÄÍ≤Ω ÏÇ¨Ìï≠" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          
          # Ïù¥Ï†Ñ Î≤†ÌÉÄ ÌÉúÍ∑∏Í∞Ä ÏûàÎäî Í≤ΩÏö∞: Ïù¥Ï†Ñ Î≤†ÌÉÄÎ∂ÄÌÑ∞ ÌòÑÏû¨ÍπåÏßÄÏùò Î™®Îì† Ïª§Î∞ã
          if [[ "$HAS_PREVIOUS_BETA" == "true" && ! -z "$PREVIOUS_BETA" ]]; then
            echo "üîç Ïù¥Ï†Ñ Î≤†ÌÉÄ ÌÉúÍ∑∏Î∂ÄÌÑ∞ ÌòÑÏû¨ÍπåÏßÄÏùò Î≥ÄÍ≤ΩÏÇ¨Ìï≠ ÏàòÏßë: $PREVIOUS_BETA..HEAD"
            
            # Ïù¥Ï†Ñ Î≤†ÌÉÄ ÌÉúÍ∑∏Í∞Ä Ïã§Ï†úÎ°ú Ï°¥Ïû¨ÌïòÎäîÏßÄ ÌôïÏù∏
            if git tag -l | grep -q "^$PREVIOUS_BETA$"; then
              echo "üìã Ïù¥Ï†Ñ Î≤†ÌÉÄ ÌÉúÍ∑∏ Î∞úÍ≤¨: $PREVIOUS_BETA"
              git log --pretty=format:"- %s" "$PREVIOUS_BETA..HEAD" >> CHANGELOG.md
            else
              echo "‚ö†Ô∏è Ïù¥Ï†Ñ Î≤†ÌÉÄ ÌÉúÍ∑∏Í∞Ä ÏóÜÏùå - ÏµúÍ∑º 5Í∞ú Ïª§Î∞ã ÏÇ¨Ïö©"
              git log -5 --pretty=format:"- %s" >> CHANGELOG.md
            fi
          else
            # Ïù¥Ï†Ñ Î≤†ÌÉÄÍ∞Ä ÏóÜÎäî Í≤ΩÏö∞: ÏµúÍ∑º 5Í∞ú Ïª§Î∞ã Ìè¨Ìï®
            echo "üîç Ïù¥Ï†Ñ Î≤†ÌÉÄÍ∞Ä ÏóÜÏñ¥ ÏµúÍ∑º 5Í∞ú Ïª§Î∞ã Ìè¨Ìï®"
            git log -5 --pretty=format:"- %s" >> CHANGELOG.md
          fi
          
          echo "" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "---" >> CHANGELOG.md
          echo "*Î≤†ÌÉÄ Î¶¥Î¶¨Ï¶àÏûÖÎãàÎã§. ÏïàÏ†ïÏÑ±ÏùÑ ÏúÑÌï¥ ÌîÑÎ°úÎçïÏÖò ÌôòÍ≤ΩÏóêÏÑúÎäî ÏÇ¨Ïö©ÏùÑ Í∂åÏû•ÌïòÏßÄ ÏïäÏäµÎãàÎã§.*" >> CHANGELOG.md

      - name: Generate Production Release Notes
        if: inputs.release_type == 'release'
        run: |
          TAG_NAME="${{ inputs.tag_name }}"
          VERSION="${TAG_NAME#v}"
          VERSION_CODE="${{ inputs.version_code }}"
          
          echo "## Î¶¥Î¶¨Ï¶à ÎÖ∏Ìä∏" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "**Î≤ÑÏ†Ñ**: $VERSION" >> CHANGELOG.md
          echo "**Version Code**: $VERSION_CODE" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "### Î≥ÄÍ≤Ω ÏÇ¨Ìï≠" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          
          # Î™®Îì† ÌÉúÍ∑∏ Í∞ÄÏ†∏Ïò§Í∏∞
          git fetch --tags
          
          # Ïù¥Ï†Ñ Ï†ïÏãù Î¶¥Î¶¨Ï¶à ÌÉúÍ∑∏ Ï∞æÍ∏∞ (Î≤†ÌÉÄ ÌÉúÍ∑∏ Ï†úÏô∏)
          previous_release_tag=$(git tag -l 'v*.*.*' --sort=-version:refname | grep -v beta | grep -v "$TAG_NAME" | head -1 || echo "")
          
          echo "üîç Ïù¥Ï†Ñ Ï†ïÏãù Î¶¥Î¶¨Ï¶à ÌÉúÍ∑∏ Í≤ÄÏÉâ Í≤∞Í≥º: $previous_release_tag"
          echo "üìã ÌòÑÏû¨ ÌÉúÍ∑∏: $TAG_NAME"
          echo "üìã ÌòÑÏû¨ HEAD: $(git rev-parse --short HEAD)"
          
          if [ ! -z "$previous_release_tag" ]; then
            echo "üìà Ïù¥Ï†Ñ Î¶¥Î¶¨Ï¶àÎ∂ÄÌÑ∞ ÌòÑÏû¨ HEADÍπåÏßÄÏùò Î≥ÄÍ≤ΩÏÇ¨Ìï≠: $previous_release_tag..HEAD"
            
            # Ïù¥Ï†Ñ Î¶¥Î¶¨Ï¶àÎ∂ÄÌÑ∞ ÌòÑÏû¨ HEADÍπåÏßÄÏùò Î™®Îì† Ïª§Î∞ã Ìè¨Ìï® (TAG_NAME ÎåÄÏã† HEAD ÏÇ¨Ïö©)
            commits=$(git log --pretty=format:"- %s" "$previous_release_tag..HEAD" 2>/dev/null || echo "")
            
            if [ ! -z "$commits" ]; then
              echo "$commits" >> CHANGELOG.md
              echo "" >> CHANGELOG.md
              echo "" >> CHANGELOG.md
              echo "---" >> CHANGELOG.md
              echo "**Ïù¥Ï†Ñ Î¶¥Î¶¨Ï¶à**: $previous_release_tag" >> CHANGELOG.md
              echo "**Ìè¨Ìï®Îêú Ïª§Î∞ã Ïàò**: $(git rev-list --count "$previous_release_tag..HEAD" 2>/dev/null || echo "0")" >> CHANGELOG.md
            else
              echo "‚ö†Ô∏è Î≥ÄÍ≤ΩÏÇ¨Ìï≠Ïù¥ ÏóÜÍ±∞ÎÇò Î≤îÏúÑ Í≥ÑÏÇ∞ Ïò§Î•ò - ÏµúÍ∑º 5Í∞ú Ïª§Î∞ã Ìè¨Ìï®" >> CHANGELOG.md
              git log -5 --pretty=format:"- %s" >> CHANGELOG.md
              echo "" >> CHANGELOG.md
              echo "" >> CHANGELOG.md
              echo "---" >> CHANGELOG.md
              echo "**Ïù¥Ï†Ñ Î¶¥Î¶¨Ï¶à**: $previous_release_tag" >> CHANGELOG.md
              echo "**Ï∞∏Í≥†**: Î≤îÏúÑ Í≥ÑÏÇ∞ Î¨∏Ï†úÎ°ú ÏµúÍ∑º 5Í∞ú Ïª§Î∞ãÏùÑ Ìè¨Ìï®ÌñàÏäµÎãàÎã§." >> CHANGELOG.md
            fi
          else
            echo "‚ö†Ô∏è Ïù¥Ï†Ñ Ï†ïÏãù Î¶¥Î¶¨Ï¶à ÌÉúÍ∑∏Î•º Ï∞æÏùÑ Ïàò ÏóÜÏùå - Î™®Îì† Ïª§Î∞ã Ìè¨Ìï®"
            git log --pretty=format:"- %s" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "---" >> CHANGELOG.md
            echo "**Ï≤´ Î≤àÏß∏ Î¶¥Î¶¨Ï¶àÏûÖÎãàÎã§.**" >> CHANGELOG.md
          fi

      - name: Check for Existing Release
        id: check-existing
        run: |
          TAG_NAME="${{ inputs.tag_name }}"
          echo "üîç Í∏∞Ï°¥ Î¶¥Î¶¨Ï¶à Î∞è ÌÉúÍ∑∏ ÌôïÏù∏ Ï§ë: $TAG_NAME"
          
          # 1. ÌÉúÍ∑∏ Ï°¥Ïû¨ Ïó¨Î∂Ä ÌôïÏù∏
          git fetch --tags
          if git tag -l | grep -q "^$TAG_NAME$"; then
            echo "üìå ÌÉúÍ∑∏ $TAG_NAME Ï°¥Ïû¨Ìï®"
            tag_exists="true"
          else
            echo "üìå ÌÉúÍ∑∏ $TAG_NAME ÏóÜÏùå"
            tag_exists="false"
          fi
          
          # 2. GitHub APIÎ•º ÌÜµÌï¥ Í∏∞Ï°¥ Î¶¥Î¶¨Ï¶à ÌôïÏù∏
          api_response=$(curl -s -w "HTTPSTATUS:%{http_code}" \
            -H "Authorization: token ${{ steps.app-token.outputs.token }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/$TAG_NAME")
          
          http_code=$(echo "$api_response" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
          
          if [ "$http_code" = "200" ]; then
            echo "üîÑ Í∞ôÏùÄ ÌÉúÍ∑∏Î™ÖÏùò Î¶¥Î¶¨Ï¶àÍ∞Ä Ïù¥ÎØ∏ Ï°¥Ïû¨Ìï©ÎãàÎã§: $TAG_NAME"
            
            # Í∏∞Ï°¥ Î¶¥Î¶¨Ï¶à Ï†ïÎ≥¥ Ï∂îÏ∂ú
            response_body=$(echo "$api_response" | sed -e 's/HTTPSTATUS:.*//g')
            existing_id=$(echo "$response_body" | jq -r '.id // empty')
            existing_name=$(echo "$response_body" | jq -r '.name // empty')
            is_draft=$(echo "$response_body" | jq -r '.draft // false')
            is_prerelease=$(echo "$response_body" | jq -r '.prerelease // false')
            
            echo "üìã Í∏∞Ï°¥ Î¶¥Î¶¨Ï¶à Ï†ïÎ≥¥:"
            echo "  - ID: $existing_id"
            echo "  - Ïù¥Î¶Ñ: $existing_name"
            echo "  - Draft ÏÉÅÌÉú: $is_draft"
            echo "  - Prerelease ÏÉÅÌÉú: $is_prerelease"
            echo "  - ÌÉúÍ∑∏ Ï°¥Ïû¨: $tag_exists"
            
            echo "üóëÔ∏è Í∏∞Ï°¥ Î¶¥Î¶¨Ï¶àÎ•º ÏÇ≠Ï†úÌïòÍ≥† ÏÉàÎ°ú ÏÉùÏÑ±Ìï©ÎãàÎã§."
            
            # Í∏∞Ï°¥ Î¶¥Î¶¨Ï¶à ÏÇ≠Ï†ú
            delete_response=$(curl -s -w "HTTPSTATUS:%{http_code}" \
              -X DELETE \
              -H "Authorization: token ${{ steps.app-token.outputs.token }}" \
              "https://api.github.com/repos/${{ github.repository }}/releases/$existing_id")
            
            delete_http_code=$(echo "$delete_response" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
            
            if [ "$delete_http_code" = "204" ]; then
              echo "‚úÖ Í∏∞Ï°¥ Î¶¥Î¶¨Ï¶à ÏÇ≠Ï†ú ÏôÑÎ£å (ID: $existing_id)"
              echo "can_create=true" >> $GITHUB_OUTPUT
            else
              echo "‚ùå Í∏∞Ï°¥ Î¶¥Î¶¨Ï¶à ÏÇ≠Ï†ú Ïã§Ìå®: HTTP $delete_http_code"
              echo "üîç ÏùëÎãµ ÎÇ¥Ïö©: $delete_response"
              echo "can_create=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          elif [ "$http_code" = "404" ]; then
            echo "‚úÖ Í∏∞Ï°¥ Î¶¥Î¶¨Ï¶àÍ∞Ä ÏóÜÏäµÎãàÎã§. ÏÉà Î¶¥Î¶¨Ï¶àÎ•º ÏÉùÏÑ±Ìï† Ïàò ÏûàÏäµÎãàÎã§."
            echo "üìå ÌÉúÍ∑∏ Ï°¥Ïû¨ Ïó¨Î∂Ä: $tag_exists"
            echo "can_create=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå API Ïò§Î•ò Î∞úÏÉù: HTTP $http_code"
            echo "üîç ÏùëÎãµ ÎÇ¥Ïö©: $api_response"
            echo "can_create=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Create Release
        if: steps.check-existing.outputs.can_create == 'true'
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
        with:
          files: |
            artifacts/**/*.apk
            artifacts/**/output-metadata.json
          tag_name: ${{ inputs.tag_name }}
          name: "${{ inputs.release_type == 'beta' && 'Beta Release' || 'Release' }} ${{ inputs.tag_name }}"
          body_path: CHANGELOG.md
          draft: false
          prerelease: ${{ inputs.release_type == 'beta' }} 