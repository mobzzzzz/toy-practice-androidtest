name: CD - Main Branch

on:
  pull_request_target:
    types: [closed]
    branches: ["main"]

# main 브랜치 배포 작업은 순차적으로 실행 (여러 PR 동시 머지 시 대기열 처리)
concurrency:
  group: "cd-main"
  cancel-in-progress: false

jobs:
  # GitHub 설정 검증
  validate-config:
    name: Validate Configuration
    if: github.event.pull_request.merged == true
    uses: ./.github/workflows/validate-github-config.yml
    secrets: inherit

  # Version Code 업데이트 (main 브랜치 머지 시에만)
  update-version-code:
    name: Update Version Code
    runs-on: ubuntu-latest
    needs: [validate-config]
    permissions:
      contents: write
      actions: write
    outputs:
      new_version_code: ${{ steps.version-update.outputs.new_version }}
    steps:
      - name: Update Version Code
        id: version-update
        uses: actions/github-script@v7
        env:
          GH_TOKEN: ${{ secrets.ADMIN_TOKEN }}
        with:
          github-token: ${{ secrets.ADMIN_TOKEN }}
          script: |
            const currentVersion = parseInt('${{ vars.VERSION_CODE }}') || 0;
            const newVersion = currentVersion + 1;
            
            await github.rest.actions.updateRepoVariable({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'VERSION_CODE',
              value: newVersion.toString()
            });
            
            console.log(`Version Code updated: ${currentVersion} → ${newVersion}`);
            core.setOutput('new_version', newVersion.toString());

  # 타임스탬프 생성
  generate-timestamp:
    name: Generate Timestamp
    runs-on: ubuntu-latest
    needs: [update-version-code]
    outputs:
      timestamp: ${{ steps.set-timestamp.outputs.value }}
    steps:
      - name: Set Timestamp
        id: set-timestamp
        env:
          TZ: 'Asia/Seoul'
        run: echo "value=$(date +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT

  # 릴리즈 태그 생성
  create-release-tag:
    name: Create Release Tag
    runs-on: ubuntu-latest
    needs: [update-version-code, generate-timestamp]
    permissions:
      contents: write
      actions: write
    outputs:
      release_tag: ${{ steps.create-release-tag.outputs.tag }}
      new_version_code: ${{ needs.update-version-code.outputs.new_version_code }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.merge_commit_sha }}
          token: ${{ secrets.ADMIN_TOKEN }}

      - name: Create Release Tag
        id: create-release-tag
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          
          latest_beta=$(git tag -l "v*-beta*" | sort -V | tail -n 1)
          if [ -z "$latest_beta" ]; then
            echo "❌ No beta tag found. Cannot create release without beta version."
            echo "Please create a beta release first by merging to dev branch."
            exit 1
          fi
          
          version=$(echo $latest_beta | sed 's/^v\(.*\)-beta\..*/\1/')
          
          # 버전이 0.0.0인 경우 (신규 프로젝트) 경고 메시지
          if [ "$version" = "0.0.0" ]; then
            echo "⚠️  Warning: Creating release from version 0.0.0 (new project)"
            echo "Consider using a proper version number for production release."
          fi
          
          release_tag="v$version"
          echo "tag=$release_tag" >> $GITHUB_OUTPUT
          
          echo "Creating release tag: $release_tag (from beta: $latest_beta)"
          git tag -a "$release_tag" -m "Release $release_tag"
          git push origin "$release_tag"

  # APK 빌드 (릴리즈 태그 생성 후)
  build-apk:
    name: Build Release APK
    needs: [create-release-tag, generate-timestamp]
    uses: ./.github/workflows/build-apk.yml
    with:
      build_type: release
      branch_ref: ${{ needs.create-release-tag.outputs.release_tag }}
      artifact_name: release-build
      timestamp: ${{ needs.generate-timestamp.outputs.timestamp }}
      version_code: ${{ needs.create-release-tag.outputs.new_version_code }}
  # 정식 릴리즈 생성
  create-production-release:
    name: Create Production Release
    needs: [build-apk, create-release-tag]
    uses: ./.github/workflows/create-release.yml
    with:
      release_type: release
      tag_name: ${{ needs.create-release-tag.outputs.release_tag }}
      artifact_name: ${{ needs.build-apk.outputs.artifact_name }}
      version_code: ${{ needs.create-release-tag.outputs.new_version_code }}
    secrets:
      ADMIN_TOKEN: ${{ secrets.ADMIN_TOKEN }} 