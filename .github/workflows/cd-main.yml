name: CD - Main Branch

on:
  pull_request_target:
    types: [closed]
    branches: ["main"]
    # 문서나 워크플로우 변경만 있는 경우 배포 스킵
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - 'README*'
      - '.gitignore'
      - '.editorconfig'
      - '.cursor/**'

# main 브랜치 배포 작업은 순차적으로 실행 (여러 PR 동시 머지 시 대기열 처리)
concurrency:
  group: "cd-main"
  cancel-in-progress: false

jobs:
  # 배포 스킵 여부 확인
  check-skip-deployment:
    name: Check Skip Deployment
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    outputs:
      should_skip: ${{ steps.check-skip.outputs.should_skip }}
      skip_reason: ${{ steps.check-skip.outputs.skip_reason }}
    steps:
      - name: Check Skip Conditions
        id: check-skip
        run: |
          # PR 제목과 커밋 메시지에서 스킵 키워드 확인
          pr_title="${{ github.event.pull_request.title }}"
          pr_body="${{ github.event.pull_request.body }}"
          
          # PR 라벨 확인
          pr_labels='${{ toJson(github.event.pull_request.labels.*.name) }}'
          
          # 스킵 키워드 목록 (실무에서 흔히 사용하는 패턴)
          skip_keywords=(
            "[skip ci]" "[ci skip]" "[no ci]" "[skip actions]" "[actions skip]"
            "[skip deploy]" "[deploy skip]" "[no deploy]" 
            "[docs only]" "[docs]" "[documentation]"
            "[workflow only]" "[workflow]" "[ci only]"
            "[skip build]" "[build skip]" "[no build]"
          )
          
          # 스킵 라벨 목록
          skip_labels=(
            "skip-ci" "skip-deploy" "skip-build" "docs-only" "workflow-only"
          )
          
          should_skip="false"
          skip_reason=""
          
          # PR 라벨에서 스킵 라벨 확인 (최우선)
          for label in "${skip_labels[@]}"; do
            if echo "$pr_labels" | grep -q "\"$label\""; then
              should_skip="true"
              skip_reason="PR 라벨에 '$label' 발견"
              break
            fi
          done
          
          # PR 제목에서 스킵 키워드 확인 (라벨에서 발견되지 않은 경우)
          if [ "$should_skip" = "false" ]; then
            for keyword in "${skip_keywords[@]}"; do
              if [[ "$pr_title" == *"$keyword"* ]]; then
                should_skip="true"
                skip_reason="PR 제목에 '$keyword' 키워드 발견"
                break
              fi
            done
          fi
          
          # PR 본문에서 스킵 키워드 확인 (제목에서 발견되지 않은 경우)
          if [ "$should_skip" = "false" ]; then
            for keyword in "${skip_keywords[@]}"; do
              if [[ "$pr_body" == *"$keyword"* ]]; then
                should_skip="true"
                skip_reason="PR 본문에 '$keyword' 키워드 발견"
                break
              fi
            done
          fi
          
          echo "should_skip=$should_skip" >> $GITHUB_OUTPUT
          echo "skip_reason=$skip_reason" >> $GITHUB_OUTPUT
          
          if [ "$should_skip" = "true" ]; then
            echo "🚫 배포 스킵: $skip_reason"
            echo "💡 배포를 원하는 경우 PR 제목/본문에서 스킵 키워드를 제거하거나 라벨을 제거하고 다시 머지하세요."
          else
            echo "✅ 배포 진행: 스킵 조건에 해당하지 않음"
          fi

  # GitHub 설정 검증
  validate-config:
    name: Validate Configuration
    if: github.event.pull_request.merged == true && needs.check-skip-deployment.outputs.should_skip != 'true'
    needs: [check-skip-deployment]
    uses: ./.github/workflows/validate-github-config.yml
    secrets: inherit

  # Version Code 업데이트 (main 브랜치 머지 시에만)
  update-version-code:
    name: Update Version Code
    runs-on: ubuntu-latest
    needs: [validate-config, check-skip-deployment]
    if: needs.check-skip-deployment.outputs.should_skip != 'true'
    permissions:
      contents: write
      actions: write
    outputs:
      new_version_code: ${{ steps.version-update.outputs.new_version }}
    steps:
      - name: Update Version Code
        id: version-update
        uses: actions/github-script@v7
        env:
          GH_TOKEN: ${{ secrets.ADMIN_TOKEN }}
        with:
          github-token: ${{ secrets.ADMIN_TOKEN }}
          script: |
            const currentVersion = parseInt('${{ vars.VERSION_CODE }}') || 0;
            const newVersion = currentVersion + 1;
            
            await github.rest.actions.updateRepoVariable({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'VERSION_CODE',
              value: newVersion.toString()
            });
            
            console.log(`Version Code updated: ${currentVersion} → ${newVersion}`);
            core.setOutput('new_version', newVersion.toString());

  # 타임스탬프 생성
  generate-timestamp:
    name: Generate Timestamp
    runs-on: ubuntu-latest
    needs: [update-version-code, check-skip-deployment]
    if: needs.check-skip-deployment.outputs.should_skip != 'true'
    outputs:
      timestamp: ${{ steps.set-timestamp.outputs.value }}
    steps:
      - name: Set Timestamp
        id: set-timestamp
        env:
          TZ: 'Asia/Seoul'
        run: echo "value=$(date +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT

  # 릴리즈 태그 생성
  create-release-tag:
    name: Create Release Tag
    runs-on: ubuntu-latest
    needs: [update-version-code, generate-timestamp, check-skip-deployment]
    if: needs.check-skip-deployment.outputs.should_skip != 'true'
    permissions:
      contents: write
      actions: write
    outputs:
      release_tag: ${{ steps.create-release-tag.outputs.tag }}
      new_version_code: ${{ needs.update-version-code.outputs.new_version_code }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.merge_commit_sha }}
          token: ${{ secrets.ADMIN_TOKEN }}

      - name: Create Release Tag
        id: create-release-tag
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          
          latest_beta=$(git tag -l "v*-beta*" | sort -V | tail -n 1)
          if [ -z "$latest_beta" ]; then
            echo "❌ No beta tag found. Cannot create release without beta version."
            echo "Please create a beta release first by merging to dev branch."
            exit 1
          fi
          
          version=$(echo $latest_beta | sed 's/^v\(.*\)-beta\..*/\1/')
          
          # PR 브랜치 이름 확인 (hotfix인지 체크)
          pr_branch="${{ github.head_ref }}"
          
          # hotfix 브랜치인 경우 patch 버전 증가
          if [[ "$pr_branch" =~ ^hotfix/ ]]; then
            echo "🔧 Hotfix 브랜치 감지: $pr_branch"
            IFS='.' read -r major minor patch <<< "$version"
            patch=$((patch + 1))
            version="$major.$minor.$patch"
            echo "📈 Hotfix 버전 증가: v$version"
          fi
          
          # 버전이 0.0.0인 경우 (신규 프로젝트) 경고 메시지
          if [ "$version" = "0.0.0" ]; then
            echo "⚠️  Warning: Creating release from version 0.0.0 (new project)"
            echo "Consider using a proper version number for production release."
          fi
          
          release_tag="v$version"
          echo "tag=$release_tag" >> $GITHUB_OUTPUT
          
          # 기존 태그가 있는지 확인
          if git tag -l | grep -q "^$release_tag$"; then
            if [[ "$pr_branch" =~ ^hotfix/ ]]; then
              echo "🔄 Hotfix: 기존 태그 $release_tag 삭제 후 재생성"
              git tag -d "$release_tag" || true
              git push origin ":refs/tags/$release_tag" || true
            else
              echo "❌ 태그 $release_tag가 이미 존재합니다"
              exit 1
            fi
          fi
          
          echo "Creating release tag: $release_tag (from beta: $latest_beta)"
          git tag -a "$release_tag" -m "Release $release_tag"
          git push origin "$release_tag"

  # APK 빌드 (릴리즈 태그 생성 후)
  build-apk:
    name: Build Release APK
    needs: [create-release-tag, generate-timestamp, check-skip-deployment]
    if: needs.check-skip-deployment.outputs.should_skip != 'true'
    uses: ./.github/workflows/build-apk.yml
    with:
      build_type: release
      branch_ref: ${{ needs.create-release-tag.outputs.release_tag }}
      artifact_name: release-build
      timestamp: ${{ needs.generate-timestamp.outputs.timestamp }}
      version_code: ${{ needs.create-release-tag.outputs.new_version_code }}

  # 정식 릴리즈 생성
  create-production-release:
    name: Create Production Release
    needs: [build-apk, create-release-tag, check-skip-deployment]
    if: needs.check-skip-deployment.outputs.should_skip != 'true'
    uses: ./.github/workflows/create-release.yml
    with:
      release_type: release
      tag_name: ${{ needs.create-release-tag.outputs.release_tag }}
      artifact_name: ${{ needs.build-apk.outputs.artifact_name }}
      version_code: ${{ needs.create-release-tag.outputs.new_version_code }}
    secrets:
      ADMIN_TOKEN: ${{ secrets.ADMIN_TOKEN }}

  # 배포 스킵 알림
  deployment-skipped:
    name: Deployment Skipped
    runs-on: ubuntu-latest
    needs: [check-skip-deployment]
    if: github.event.pull_request.merged == true && needs.check-skip-deployment.outputs.should_skip == 'true'
    steps:
      - name: Skip Notification
        run: |
          echo "🚫 **배포가 스킵되었습니다**"
          echo ""
          echo "**스킵 이유:** ${{ needs.check-skip-deployment.outputs.skip_reason }}"
          echo ""
          echo "**스킵 조건:**"
          echo "- PR 라벨에 스킵 라벨 포함 (최우선)"
          echo "- PR 제목/본문에 스킵 키워드 포함"
          echo "- 문서나 설정 파일만 변경 (paths-ignore)"
          echo ""
          echo "**배포를 원하는 경우:**"
          echo "1. PR 라벨에서 스킵 라벨 제거"
          echo "2. PR 제목/본문에서 스킵 키워드 제거"
          echo "3. 새로운 커밋 추가 후 다시 머지"
          echo "4. 또는 수동으로 workflow_dispatch 실행" 