# Stage 브랜치용 CD 워크플로우 템플릿
# 필요 시 이 파일을 cd-stage.yml로 복사하여 사용

name: CD - Stage Branch

on:
  pull_request_target:
    types: [closed]
    branches: ["stage"]

# stage 브랜치 배포 작업은 순차적으로 실행 (여러 PR 동시 머지 시 대기열 처리)
concurrency:
  group: "cd-stage"
  cancel-in-progress: false

jobs:
  # GitHub 설정 검증
  validate-config:
    name: Validate Configuration
    if: github.event.pull_request.merged == true
    uses: ./.github/workflows/validate-github-config.yml
    secrets: inherit

  # 타임스탬프 생성
  generate-timestamp:
    name: Generate Timestamp
    runs-on: ubuntu-latest
    needs: [validate-config]
    outputs:
      timestamp: ${{ steps.set-timestamp.outputs.value }}
    steps:
      - name: Set Timestamp
        id: set-timestamp
        env:
          TZ: 'Asia/Seoul'
        run: echo "value=$(date +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT

  # APK 빌드 (Stage는 Release 빌드 사용)
  build-apk:
    name: Build Stage APK
    needs: [validate-config, generate-timestamp]
    uses: ./.github/workflows/build-apk.yml
    with:
      build_type: release
      branch_ref: ${{ github.event.pull_request.merge_commit_sha }}
      artifact_name: stage-build
      timestamp: ${{ needs.generate-timestamp.outputs.timestamp }}

  # Stage 태그 생성 및 관리
  version-management:
    name: Stage Version Management
    runs-on: ubuntu-latest
    needs: [build-apk, generate-timestamp]
    permissions:
      contents: write
      actions: write
    outputs:
      version_code: ${{ steps.create-stage-tag.outputs.version_code }}
      stage_tag: ${{ steps.create-stage-tag.outputs.tag }}
      has_previous_stage: ${{ steps.create-stage-tag.outputs.has_previous_stage }}
      previous_stage: ${{ steps.create-stage-tag.outputs.previous_stage }}
    steps:
      - name: Generate GitHub App Token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.merge_commit_sha }}
          token: ${{ steps.app-token.outputs.token }}

      - name: Create Stage Tag
        id: create-stage-tag
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          
          # 최신 베타 태그에서 버전 추출
          latest_beta=$(git tag -l "v*-beta*" | sort -V | tail -n 1)
          
          if [ -z "$latest_beta" ]; then
            echo "No beta tag found for stage release"
            exit 1
          fi
          
          version=$(echo $latest_beta | sed 's/^v\(.*\)-beta\..*/\1/')
          
          # 이전 스테이지 태그 찾기
          previous_stage=$(git tag -l "v${version}-stage*" | sort -V | tail -n 1)
          
          # 새로운 스테이지 태그 생성
          current_version_code="${{ vars.VERSION_CODE }}"
          stage_tag="v$version-stage.${{ needs.generate-timestamp.outputs.timestamp }}"
          echo "tag=$stage_tag" >> $GITHUB_OUTPUT
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "version_code=$current_version_code" >> $GITHUB_OUTPUT
          echo "has_previous_stage=false" >> $GITHUB_OUTPUT
          
          if [ ! -z "$previous_stage" ]; then
            echo "has_previous_stage=true" >> $GITHUB_OUTPUT
            echo "previous_stage=$previous_stage" >> $GITHUB_OUTPUT
            echo "이전 스테이지 태그 발견: $previous_stage (릴리즈 작업에서 삭제 예정)"
          fi
          
          echo "Creating stage tag: $stage_tag (version code: $current_version_code)"
          git tag -a "$stage_tag" -m "Stage release $stage_tag (version code: $current_version_code)"
          git push origin "$stage_tag"

  # 스테이지 릴리즈 생성
  create-stage-release:
    name: Create Stage Release
    needs: [build-apk, version-management]
    uses: ./.github/workflows/create-release.yml
    with:
      release_type: beta  # Stage도 prerelease로 처리
      tag_name: ${{ needs.version-management.outputs.stage_tag }}
      artifact_name: ${{ needs.build-apk.outputs.artifact_name }}
      version_code: ${{ needs.version-management.outputs.version_code }}
      previous_beta_tag: ${{ needs.version-management.outputs.previous_stage }}
      has_previous_beta: ${{ needs.version-management.outputs.has_previous_stage }}
    secrets:
      APP_ID: ${{ secrets.APP_ID }}
      APP_PRIVATE_KEY: ${{ secrets.APP_PRIVATE_KEY }} 