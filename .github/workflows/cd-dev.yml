name: CD - Dev Branch

on:
  pull_request_target:
    types: [closed]
    branches: ["dev"]

# dev 브랜치 배포 작업은 순차적으로 실행 (여러 PR 동시 머지 시 대기열 처리)
concurrency:
  group: "cd-dev"
  cancel-in-progress: false

jobs:
  # 배포 스킵 여부 확인
  check-skip-deployment:
    name: Check Skip Deployment
    if: github.event.pull_request.merged == true
    uses: ./.github/workflows/check-skip-deployment.yml
    with:
      pr_title: ${{ github.event.pull_request.title }}
      pr_labels: ${{ toJson(github.event.pull_request.labels.*.name) }}

  # GitHub 설정 검증
  validate-config:
    name: Validate Configuration
    if: github.event.pull_request.merged == true && needs.check-skip-deployment.outputs.should_skip != 'true'
    needs: [check-skip-deployment]
    uses: ./.github/workflows/validate-github-config.yml
    secrets: inherit

  # 타임스탬프 생성
  generate-timestamp:
    name: Generate Timestamp
    runs-on: ubuntu-latest
    needs: [validate-config, check-skip-deployment]
    if: needs.check-skip-deployment.outputs.should_skip != 'true'
    outputs:
      timestamp: ${{ steps.set-timestamp.outputs.value }}
    steps:
      - name: Set Timestamp
        id: set-timestamp
        env:
          TZ: 'Asia/Seoul'
        run: echo "value=$(date +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT

  # APK 빌드
  build-apk:
    name: Build Debug APK
    needs: [validate-config, generate-timestamp, check-skip-deployment]
    if: needs.check-skip-deployment.outputs.should_skip != 'true'
    uses: ./.github/workflows/build-apk.yml
    with:
      build_type: debug
      branch_ref: ${{ github.event.pull_request.merge_commit_sha }}
      artifact_name: beta-build
      timestamp: ${{ needs.generate-timestamp.outputs.timestamp }}
      version_code: ${{ vars.VERSION_CODE }}

  # 버전 관리 및 베타 태그 생성
  version-management:
    name: Version Management
    runs-on: ubuntu-latest
    needs: [build-apk, generate-timestamp, check-skip-deployment]
    if: needs.check-skip-deployment.outputs.should_skip != 'true'
    permissions:
      contents: write
      actions: write
    outputs:
      version_code: ${{ steps.create-beta-tag.outputs.version_code }}
      beta_tag: ${{ steps.create-beta-tag.outputs.tag }}
      has_previous_beta: ${{ steps.create-beta-tag.outputs.has_previous_beta }}
      previous_beta: ${{ steps.create-beta-tag.outputs.previous_beta }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.merge_commit_sha }}
          token: ${{ secrets.ADMIN_TOKEN }}

      - name: Create Beta Tag
        id: create-beta-tag
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          
          # 최신 정식 릴리즈 태그 가져오기 (beta가 아닌 태그 중 가장 최신)
          latest_release=$(git tag -l "v*" | grep -v "beta" | sort -V | tail -n 1)
          
          # 최신 베타 태그 가져오기
          latest_beta=$(git tag -l "v*-beta*" | sort -V | tail -n 1)
          
          # PR 브랜치 이름에서 타입 추출
          branch_name="${{ github.head_ref }}"
          
          # 신규 프로젝트 또는 태그가 없는 경우 기본값 설정 (출시 전 상태)
          if [ -z "$latest_release" ]; then
            echo "No release tags found. Starting with version 0.0.0 for new project."
            major=0
            minor=0
            patch=0
          else
            version=${latest_release#v}
            IFS='.' read -r major minor patch <<< "$version"
            
            # 최신 베타 버전 분석
            if [ ! -z "$latest_beta" ]; then
              beta_version=$(echo $latest_beta | sed 's/v\([0-9]*\.[0-9]*\.[0-9]*\).*/\1/')
              IFS='.' read -r beta_major beta_minor beta_patch <<< "$beta_version"
              
              # 베타 버전이 이미 minor 버전이 올라간 상태인지 확인
              if [ "$beta_minor" -gt "$minor" ]; then
                # minor 버전이 이미 올라간 상태면 해당 버전 유지
                major=$beta_major
                minor=$beta_minor
                patch=$beta_patch
                echo "Using existing beta version: v$major.$minor.$patch"
              else
                # 브랜치 타입에 따라 버전 결정
                if [[ "$branch_name" =~ ^feat/ ]]; then
                  minor=$((minor + 1))
                  patch=0
                else
                  patch=$((patch + 1))
                fi
              fi
            else
              # 브랜치 타입에 따라 버전 결정
              if [[ "$branch_name" =~ ^feat/ ]]; then
                minor=$((minor + 1))
                patch=0
              else
                patch=$((patch + 1))
              fi
            fi
          fi
          
          # 신규 프로젝트에서 첫 번째 개발 시 버전 처리
          if [ "$major" -eq 0 ] && [ "$minor" -eq 0 ] && [ "$patch" -eq 0 ]; then
            if [[ "$branch_name" =~ ^feat/ ]]; then
              # 첫 번째 기능 개발: 0.1.0
              minor=1
              patch=0
              echo "First feature development: v0.1.0"
            else
              # 첫 번째 수정/개선: 0.0.1
              patch=1
              echo "First fix/improvement: v0.0.1"
            fi
          fi
          
          next_version="$major.$minor.$patch"
          
          # 이전 베타 태그 찾기 (같은 버전의 가장 최신 베타)
          previous_beta=$(git tag -l "v${next_version}-beta*" | sort -V | tail -n 1)
          
          # 새로운 베타 태그 생성 (현재 version code 사용)
          current_version_code="${{ vars.VERSION_CODE }}"
          
          # VERSION_CODE가 설정되지 않은 신규 프로젝트의 경우 기본값 사용
          if [ -z "$current_version_code" ] || [ "$current_version_code" = "0" ]; then
            current_version_code=1
            echo "No VERSION_CODE found. Using default value: 1"
          fi
          
          beta_tag="v$next_version-beta.${{ needs.generate-timestamp.outputs.timestamp }}"
          echo "tag=$beta_tag" >> $GITHUB_OUTPUT
          echo "version=$next_version" >> $GITHUB_OUTPUT
          echo "version_code=$current_version_code" >> $GITHUB_OUTPUT
          echo "has_previous_beta=false" >> $GITHUB_OUTPUT
          
          if [ ! -z "$previous_beta" ]; then
            echo "has_previous_beta=true" >> $GITHUB_OUTPUT
            echo "previous_beta=$previous_beta" >> $GITHUB_OUTPUT
            echo "이전 베타 태그 발견: $previous_beta (릴리즈 작업에서 삭제 예정)"
          fi
          
          echo "Creating beta tag: $beta_tag (version code: $current_version_code, based on ${latest_release:-'new project'})"
          git tag -a "$beta_tag" -m "Beta release $beta_tag (version code: $current_version_code)"
          git push origin "$beta_tag"

  # 베타 릴리즈 생성
  create-beta-release:
    name: Create Beta Release
    needs: [build-apk, version-management, check-skip-deployment]
    if: needs.check-skip-deployment.outputs.should_skip != 'true'
    uses: ./.github/workflows/create-release.yml
    with:
      release_type: beta
      tag_name: ${{ needs.version-management.outputs.beta_tag }}
      artifact_name: ${{ needs.build-apk.outputs.artifact_name }}
      version_code: ${{ needs.version-management.outputs.version_code }}
      previous_beta_tag: ${{ needs.version-management.outputs.previous_beta }}
      has_previous_beta: ${{ needs.version-management.outputs.has_previous_beta }}
    secrets:
      ADMIN_TOKEN: ${{ secrets.ADMIN_TOKEN }}

  # 배포 스킵 알림
  deployment-skipped:
    name: Deployment Skipped
    runs-on: ubuntu-latest
    needs: [check-skip-deployment]
    if: github.event.pull_request.merged == true && needs.check-skip-deployment.outputs.should_skip == 'true'
    steps:
      - name: Skip Notification
        run: |
          echo "🚫 **배포가 스킵되었습니다**"
          echo ""
          echo "**스킵 이유:** ${{ needs.check-skip-deployment.outputs.skip_reason }}"
          echo ""
          echo "**스킵 조건:**"
          echo "- PR 라벨에 'skip-ci' 포함"
          echo "- PR 제목에 '[skip ci]' 키워드 포함"
          echo ""
          echo "**배포를 원하는 경우:**"
          echo "1. PR 라벨에서 'skip-ci' 제거"
          echo "2. PR 제목에서 '[skip ci]' 제거"
          echo "3. 새로운 커밋 추가 후 다시 머지" 