name: CI/CD

on:
  pull_request:
    branches: [ "main", "dev" ]
  pull_request_target:
    types: [closed]
    branches: ["dev"]
  push:
    branches: ["main"]
    tags:
      - 'v*'

jobs:
  # PR 검증 작업 (PR 생성/수정 시에만 실행)
  validate:
    if: github.event_name == 'pull_request'
    name: Validate Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Check code style
        run: ./gradlew spotlessCheck
        
      - name: Run Android Lint
        run: ./gradlew lint
        
      - name: Upload Lint Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lint-report
          path: app/build/reports/lint-results-debug.html

  test:
    if: github.event_name == 'pull_request'
    name: Run Tests
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Run Unit Tests
        run: ./gradlew testDebugUnitTest
        
      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: app/build/reports/tests/testDebugUnitTest/

  # PR 빌드 검증
  build-check:
    if: github.event_name == 'pull_request'
    name: Build Debug APK For Check
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Build Debug APK
        run: ./gradlew assembleDebug

  # 버전 관리 작업 (PR 머지 또는 main 브랜치 푸시 시에만 실행)
  version-management:
    name: Version Management
    if: |
      (github.event_name == 'pull_request_target' && github.event.pull_request.merged == true && github.base_ref == 'dev') ||
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      github.ref_type == 'tag'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write
    outputs:
      version_code: ${{ steps.version-update.outputs.new_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Update Version Code
        if: github.event.pull_request.merged == true && github.base_ref == 'dev'
        id: version-update
        uses: actions/github-script@v7
        env:
          GH_TOKEN: ${{ secrets.ADMIN_TOKEN }}
        with:
          github-token: ${{ secrets.ADMIN_TOKEN }}
          script: |
            const currentVersion = parseInt('${{ vars.VERSION_CODE }}') || 0;
            const newVersion = currentVersion + 1;
            
            await github.rest.actions.updateRepoVariable({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'VERSION_CODE',
              value: newVersion.toString()
            });
            
            console.log(`Version Code updated: ${currentVersion} → ${newVersion}`);
            core.setOutput('new_version', newVersion.toString());

      - name: Version Update & Tag Creation
        if: github.event.pull_request.merged == true
        id: version
        run: |
          # Git 설정
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          
          # 최신 태그 가져오기 (beta 또는 릴리즈)
          latest_tag=$(git tag -l "v*" --sort=-v:refname | head -n 1)
          
          if [[ "${{ github.base_ref }}" == "dev" ]]; then
            # beta 버전 생성을 위한 타임스탬프
            timestamp=$(date +%Y%m%d%H%M%S)
            
            if [ -z "$latest_tag" ]; then
              # 태그가 없는 경우 v1.0.0-beta.timestamp 생성
              new_version="v1.0.0-beta.$timestamp"
            else
              # 기존 버전에서 증가
              base_version=$(echo $latest_tag | sed 's/-beta\.[0-9]\+//' | sed 's/^v//')
              IFS='.' read -r major minor patch <<< "$base_version"
              
              case "${{ github.head_ref }}" in
                major/*)
                  new_version="v$((major + 1)).0.0-beta.$timestamp"
                  ;;
                feat/*)
                  new_version="v$major.$((minor + 1)).0-beta.$timestamp"
                  ;;
                fix/* | *)
                  new_version="v$major.$minor.$((patch + 1))-beta.$timestamp"
                  ;;
              esac
            fi
            
            echo "Creating beta tag: $new_version"
            git tag -a "$new_version" -m "Beta release $new_version"
            git push origin "$new_version"
          
            # beta 태그에서 릴리즈 버전 추출
            latest_beta=$(git tag -l "v*-beta.*" --sort=-v:refname | head -n 1)
            release_version=$(echo $latest_beta | sed 's/-beta\.[0-9]\+//')
            
            echo "Creating release tag: $release_version"
            git tag -a "$release_version" -m "Release version $release_version"
            git push origin "$release_version"
          fi

  # 빌드 작업 (PR 머지 또는 main 브랜치 푸시 시에만 실행)
  build:
    name: Build APK
    needs: [version-management]
    if: |
      (github.event_name == 'pull_request_target' && github.event.pull_request.merged == true && github.base_ref == 'dev') ||
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      github.ref_type == 'tag'
    runs-on: ubuntu-latest
    outputs:
      build_type: ${{ steps.set-build-type.outputs.build_type }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      # 빌드 타입 설정
      - name: Set Build Type
        id: set-build-type
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "build_type=release" >> $GITHUB_OUTPUT
          else
            echo "build_type=debug" >> $GITHUB_OUTPUT
          fi

      # version.properties 생성
      - name: Create Version Properties
        run: |
          # version.properties 파일 생성을 위한 버전 정보 추출
          if ! git tag -l "v*" | grep -q .; then
            # 태그가 없는 경우 (출시 전)
            version_major="0"
            version_minor="0"
            version_patch="0"
            is_beta="true"
            timestamp=$(date +%Y%m%d%H%M%S)
          else
            # 최신 릴리즈 태그와 베타 태그 가져오기
            latest_release_tag=$(git tag -l "v*" | grep -v "beta" | sort -V | tail -n 1)
            latest_beta_tag=$(git tag -l "v*-beta.*" | sort -V | tail -n 1)
            
            # 최신 태그 결정
            if [[ -z "$latest_beta_tag" ]]; then
              latest_tag="$latest_release_tag"
            elif [[ -z "$latest_release_tag" ]]; then
              latest_tag="$latest_beta_tag"
            else
              # 베타가 더 최신 버전인지 비교
              beta_base=$(echo "$latest_beta_tag" | sed 's/-beta\.[0-9]\+//')
              if [[ "$(echo -e "$latest_release_tag\n$beta_base" | sort -V | tail -n 1)" == "$beta_base" ]]; then
                latest_tag="$latest_beta_tag"
              else
                latest_tag="$latest_release_tag"
              fi
            fi

            # 베타 버전 여부와 타임스탬프 추출
            if [[ $latest_tag =~ -beta\.[0-9]+ ]]; then
              is_beta="true"
              timestamp=$(echo $latest_tag | sed 's/.*-beta\.\([0-9]\+\)/\1/')
            else
              is_beta="false"
              timestamp=""
            fi
            
            # 버전 숫자 추출
            version_parts=($(echo $latest_tag | sed 's/-beta\.[0-9]\+//' | sed 's/v\([0-9]*\)\.\([0-9]*\)\.\([0-9]*\).*/\1 \2 \3/'))
            version_major="${version_parts[0]}"
            version_minor="${version_parts[1]}"
            version_patch="${version_parts[2]}"
          fi
          
          # version.properties 생성
          cat > version.properties << EOF
          VERSION_CODE=${{ needs.version-management.outputs.version_code || vars.VERSION_CODE }}
          VERSION_MAJOR=$version_major
          VERSION_MINOR=$version_minor
          VERSION_PATCH=$version_patch
          IS_BETA=$is_beta
          TIMESTAMP=$timestamp
          VERSION_NAME=${version_major}.${version_minor}.${version_patch}${is_beta:+-beta.${timestamp}}
          EOF

          echo "Created version.properties with:"
          echo "Version: $version_major.$version_minor.$version_patch"
          echo "Version Code: ${{ needs.version-management.outputs.version_code || vars.VERSION_CODE }}"
          echo "Is Beta: $is_beta"
          [[ "$is_beta" == "true" ]] && echo "Beta Timestamp: $timestamp"

      # APK 빌드
      - name: Build APK
        run: |
          if [[ "${{ steps.set-build-type.outputs.build_type }}" == "release" ]]; then
            ./gradlew assembleRelease
          else
            ./gradlew assembleDebug
          fi

      # 빌드된 APK를 아티팩트로 업로드 (다음 job에서 사용)
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: |
            app/build/outputs/apk/
            version.properties
          retention-days: 1

  # 배포 작업 (PR 머지 또는 main 브랜치 푸시 시에만 실행)
  deploy:
    name: Deploy APK
    needs: [build, version-management]
    if: |
      (github.event_name == 'pull_request_target' && github.event.pull_request.merged == true && github.base_ref == 'dev') ||
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      github.ref_type == 'tag'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        
      # 이전 job의 빌드 결과물 다운로드
      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: .

      # APK 이름 변경
      - name: Rename APK
        run: |
          VERSION_NAME=$(cat version.properties | grep "VERSION_NAME" | cut -d'=' -f2)
          APP_ID=$(./gradlew -q printApplicationId | tail -n 1)
          
          if [[ "${{ needs.build.outputs.build_type }}" == "release" ]]; then
            APK_DIR="app/build/outputs/apk/release"
            OLD_APK="app-release-unsigned.apk"
            NEW_APK="${APP_ID}-${VERSION_NAME}-release-unsigned.apk"
          else
            APK_DIR="app/build/outputs/apk/debug"
            OLD_APK="app-debug.apk"
            NEW_APK="${APP_ID}-${VERSION_NAME}-debug.apk"
          fi

          if [ -f "${APK_DIR}/${OLD_APK}" ]; then
            cd ${APK_DIR}
            mv "${OLD_APK}" "${NEW_APK}"
            echo "APK renamed: ${OLD_APK} -> ${NEW_APK}"
          else
            echo "Warning: APK file not found at ${APK_DIR}/${OLD_APK}"
            echo "Contents of ${APK_DIR}:"
            ls -la ${APK_DIR} || echo "Directory not found"
            exit 1
          fi

      # 디버그 APK 아티팩트 업로드
      - name: Upload Debug APK
        if: needs.build.outputs.build_type == 'debug'
        uses: actions/upload-artifact@v4
        with:
          name: debug-apk
          path: app/build/outputs/apk/debug/*-debug.apk

      # 릴리즈 노트 생성 (태그 푸시 시에만)
      - name: Generate Release Notes
        if: needs.build.outputs.build_type == 'release'
        id: release_notes
        run: |
          version=$(git describe --tags --abbrev=0)
          previous_tag=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          echo "## 변경 사항" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "버전: $version" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          
          if [ -z "$previous_tag" ]; then
            git log --pretty=format:"- %s" >> CHANGELOG.md
          else
            git log --pretty=format:"- %s" ${previous_tag}..HEAD >> CHANGELOG.md
          fi

      # GitHub 릴리즈 생성 (태그 푸시 시에만)
      - name: Create Release
        if: needs.build.outputs.build_type == 'release'
        uses: softprops/action-gh-release@v1
        with:
          files: |
            app/build/outputs/apk/release/*-release-unsigned.apk
          name: "v${{ vars.VERSION_MAJOR }}.${{ vars.VERSION_MINOR }}.${{ vars.VERSION_PATCH }}"
          body_path: CHANGELOG.md
          draft: false
          prerelease: false
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 