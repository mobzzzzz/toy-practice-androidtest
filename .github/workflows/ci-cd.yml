name: CI/CD

on:
  pull_request:
    branches: [ "main", "dev" ]
  pull_request_target:
    types: [closed]
    branches: ["dev", "main"]

# PR이 머지되기 전에 모든 체크가 통과되어야 함을 명시
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # 코드 검증 작업
  validate:
    if: |
      github.event_name == 'pull_request' && 
      !github.event.pull_request.merged
    name: Validate Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Check code style
        run: ./gradlew spotlessCheck
        
      - name: Run Android Lint
        run: ./gradlew lint
        
      - name: Upload Lint Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lint-report
          path: app/build/reports/lint-results-debug.html

  # PR 검증용 테스트 작업
  test-and-build:
    name: Test and Build
    needs: [validate]
    if: |
      github.event_name == 'pull_request' && 
      !github.event.pull_request.merged
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Run Unit Tests
        run: ./gradlew testDebugUnitTest
        
      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: app/build/reports/tests/testDebugUnitTest/

  # 배포용 빌드 작업
  build-for-deploy:
    name: Build for Deploy
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request_target' && 
      github.event.pull_request.merged == true
    outputs:
      build_type: ${{ github.base_ref == 'main' && 'release' || 'debug' }}
      timestamp: ${{ steps.set-timestamp.outputs.value }}
      artifact_name: ${{ steps.set-artifact-name.outputs.value }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.merge_commit_sha }}
          fetch-depth: 0
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Run Unit Tests
        run: ./gradlew testDebugUnitTest
        
      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-deploy
          path: app/build/reports/tests/testDebugUnitTest/

      - name: Set Timestamp
        id: set-timestamp
        env:
          TZ: 'Asia/Seoul'
        run: echo "value=$(date +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT

      - name: Set Artifact Name
        id: set-artifact-name
        run: |
          if [[ "${{ github.base_ref }}" == "main" ]]; then
            echo "value=release-build" >> $GITHUB_OUTPUT
          else
            echo "value=beta-build" >> $GITHUB_OUTPUT
          fi

      - name: Build APK
        env:
          VERSION_CODE: ${{ vars.VERSION_CODE }}
          BUILD_TIMESTAMP: ${{ steps.set-timestamp.outputs.value }}
          BETA_VERSION: ${{ needs.version-management.outputs.version }}
        run: |
          if [[ "${{ github.base_ref }}" == "main" ]]; then
            ./gradlew assembleRelease -Prelease
          else
            ./gradlew assembleDebug
          fi

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.set-artifact-name.outputs.value }}
          path: |
            app/build/outputs/apk/**/*.apk
            app/build/outputs/apk/**/output-metadata.json
          retention-days: 1

  # 버전 관리 작업 (dev 브랜치 머지 시에만)
  version-management:
    name: Version Management
    runs-on: ubuntu-latest
    needs: [build-for-deploy]
    if: |
      github.event_name == 'pull_request_target' && 
      github.event.pull_request.merged == true && 
      github.base_ref == 'dev'
    permissions:
      contents: write
      actions: write
    outputs:
      version_code: ${{ vars.VERSION_CODE }}
      beta_tag: ${{ steps.create-beta-tag.outputs.tag }}
      has_previous_beta: ${{ steps.create-beta-tag.outputs.has_previous_beta }}
      previous_beta: ${{ steps.create-beta-tag.outputs.previous_beta }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.merge_commit_sha }}
          token: ${{ secrets.ADMIN_TOKEN }}

      - name: Update Version Code
        id: version-update
        uses: actions/github-script@v7
        env:
          GH_TOKEN: ${{ secrets.ADMIN_TOKEN }}
        with:
          github-token: ${{ secrets.ADMIN_TOKEN }}
          script: |
            const currentVersion = parseInt('${{ vars.VERSION_CODE }}') || 0;
            const newVersion = currentVersion + 1;
            
            await github.rest.actions.updateRepoVariable({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'VERSION_CODE',
              value: newVersion.toString()
            });
            
            console.log(`Version Code updated: ${currentVersion} → ${newVersion}`);
            core.setOutput('new_version', newVersion.toString());

      - name: Create Beta Tag
        id: create-beta-tag
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          
          # 최신 정식 릴리즈 태그 가져오기 (beta가 아닌 태그 중 가장 최신)
          latest_release=$(git tag -l "v*" | grep -v "beta" | sort -V | tail -n 1)
          
          # 최신 베타 태그 가져오기
          latest_beta=$(git tag -l "v*-beta*" | sort -V | tail -n 1)
          
          # PR 브랜치 이름에서 타입 추출
          branch_name="${{ github.head_ref }}"
          
          # 기본값 설정
          if [ -z "$latest_release" ]; then
            major=1
            minor=0
            patch=0
          else
            version=${latest_release#v}
            IFS='.' read -r major minor patch <<< "$version"
            
            # 최신 베타 버전 분석
            if [ ! -z "$latest_beta" ]; then
              beta_version=$(echo $latest_beta | sed 's/v\([0-9]*\.[0-9]*\.[0-9]*\).*/\1/')
              IFS='.' read -r beta_major beta_minor beta_patch <<< "$beta_version"
              
              # 베타 버전이 이미 minor 버전이 올라간 상태인지 확인
              if [ "$beta_minor" -gt "$minor" ]; then
                # minor 버전이 이미 올라간 상태면 해당 버전 유지
                major=$beta_major
                minor=$beta_minor
                patch=$beta_patch
                echo "Using existing beta version: v$major.$minor.$patch"
              else
                # 브랜치 타입에 따라 버전 결정
                if [[ "$branch_name" =~ ^feat/ ]]; then
                  minor=$((minor + 1))
                  patch=0
                else
                  patch=$((patch + 1))
                fi
              fi
            else
              # 브랜치 타입에 따라 버전 결정
              if [[ "$branch_name" =~ ^feat/ ]]; then
                minor=$((minor + 1))
                patch=0
              else
                patch=$((patch + 1))
              fi
            fi
          fi
          
          next_version="$major.$minor.$patch"
          
          # 이전 베타 태그 찾기 (같은 버전의 가장 최신 베타)
          previous_beta=$(git tag -l "v${next_version}-beta*" | sort -V | tail -n 1)
          
          # 새로운 베타 태그 생성
          beta_tag="v$next_version-beta.${{ needs.build-for-deploy.outputs.timestamp }}"
          echo "tag=$beta_tag" >> $GITHUB_OUTPUT
          echo "version=$next_version" >> $GITHUB_OUTPUT
          echo "has_previous_beta=false" >> $GITHUB_OUTPUT
          
          if [ ! -z "$previous_beta" ]; then
            echo "has_previous_beta=true" >> $GITHUB_OUTPUT
            echo "previous_beta=$previous_beta" >> $GITHUB_OUTPUT
            echo "이전 베타 태그 발견: $previous_beta (릴리즈 작업에서 삭제 예정)"
          fi
          
          echo "Creating beta tag: $beta_tag (based on $latest_release)"
          git tag -a "$beta_tag" -m "Beta release $beta_tag"
          git push origin "$beta_tag"

  # main 브랜치 머지 시 릴리즈 태그 생성
  create-release-tag:
    name: Create Release Tag
    runs-on: ubuntu-latest
    needs: [build-for-deploy]
    if: |
      github.event_name == 'pull_request_target' && 
      github.event.pull_request.merged == true && 
      github.base_ref == 'main'
    permissions:
      contents: write
    outputs:
      release_tag: ${{ steps.create-release-tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.merge_commit_sha }}
          token: ${{ secrets.ADMIN_TOKEN }}

      - name: Create Release Tag
        id: create-release-tag
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          
          latest_beta=$(git tag -l "v*-beta*" | sort -V | tail -n 1)
          if [ -z "$latest_beta" ]; then
            echo "No beta tag found"
            exit 1
          fi
          
          version=$(echo $latest_beta | sed 's/^v\(.*\)-beta\..*/\1/')
          release_tag="v$version"
          echo "tag=$release_tag" >> $GITHUB_OUTPUT
          
          echo "Creating release tag: $release_tag"
          git tag -a "$release_tag" -m "Release $release_tag"
          git push origin "$release_tag"

  # 베타 릴리즈 생성 (dev 브랜치 머지 시)
  create-beta-release:
    name: Create Beta Release
    runs-on: ubuntu-latest
    needs: [build-for-deploy, version-management]
    if: |
      github.event_name == 'pull_request_target' && 
      github.event.pull_request.merged == true && 
      github.base_ref == 'dev'
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.version-management.outputs.beta_tag }}
          fetch-depth: 0
          token: ${{ secrets.ADMIN_TOKEN }}
        
      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build-for-deploy.outputs.artifact_name }}
          path: artifacts

      - name: Get Previous Beta Release Notes
        id: get-previous-notes
        run: |
          has_previous="${{ needs.version-management.outputs.has_previous_beta }}"
          previous_beta="${{ needs.version-management.outputs.previous_beta }}"
          
          echo "has_previous_beta: $has_previous"
          echo "previous_beta: $previous_beta"
          
          if [[ "$has_previous" == "true" ]] && [[ ! -z "$previous_beta" ]]; then
            echo "이전 베타 릴리즈 노트 가져오는 중: $previous_beta"
            
            # GitHub API를 통해 이전 릴리즈 정보 가져오기
            api_response=$(curl -s -w "HTTPSTATUS:%{http_code}" \
              -H "Authorization: token ${{ secrets.ADMIN_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/releases/tags/$previous_beta")
            
            http_code=$(echo "$api_response" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
            response_body=$(echo "$api_response" | sed -e 's/HTTPSTATUS:.*//g')
            
            echo "API HTTP 상태 코드: $http_code"
            
            if [ "$http_code" = "200" ]; then
              previous_notes=$(echo "$response_body" | jq -r '.body // empty')
              release_id=$(echo "$response_body" | jq -r '.id // empty')
              
              echo "릴리즈 ID: $release_id"
              echo "릴리즈 노트 길이: ${#previous_notes}"
              
              # 릴리즈 ID를 저장 (삭제용)
              echo "release_id=$release_id" >> $GITHUB_OUTPUT
              
              if [ ! -z "$previous_notes" ] && [ "$previous_notes" != "null" ] && [ "$previous_notes" != "empty" ]; then
                # 변경 사항 부분만 추출 (헤더 제외)
                changes=$(echo "$previous_notes" | sed -n '/^- /p' | head -20)
                if [ ! -z "$changes" ]; then
                  echo "previous_changes<<EOF" >> $GITHUB_OUTPUT
                  echo "$changes" >> $GITHUB_OUTPUT
                  echo "EOF" >> $GITHUB_OUTPUT
                  echo "has_changes=true" >> $GITHUB_OUTPUT
                  echo "이전 릴리즈 노트 가져오기 완료 (${#changes} 문자)"
                else
                  echo "has_changes=false" >> $GITHUB_OUTPUT
                  echo "이전 릴리즈 노트에 변경사항이 없음"
                fi
              else
                echo "has_changes=false" >> $GITHUB_OUTPUT
                echo "이전 릴리즈 노트가 비어있음"
              fi
            elif [ "$http_code" = "404" ]; then
              echo "has_changes=false" >> $GITHUB_OUTPUT
              echo "release_id=" >> $GITHUB_OUTPUT
              echo "이전 베타 릴리즈를 찾을 수 없음 (404)"
            else
              echo "has_changes=false" >> $GITHUB_OUTPUT
              echo "release_id=" >> $GITHUB_OUTPUT
              echo "API 호출 실패: HTTP $http_code"
              echo "응답: $response_body"
              
              # API 오류 시 수동 처리 가이드 제공
              if [[ "$http_code" =~ ^5[0-9][0-9]$ ]]; then
                echo ""
                echo "🚨 GitHub API 서버 오류 (HTTP $http_code) 감지!"
                echo "Re-run job을 해도 동일한 오류가 발생할 가능성이 높습니다."
                echo ""
                echo "📋 수동 처리 방법:"
                echo "1. GitHub 릴리즈 페이지에서 이전 베타 릴리즈 확인:"
                echo "   https://github.com/${{ github.repository }}/releases"
                echo ""
                echo "2. 이전 베타 릴리즈가 있다면 수동으로 삭제하거나 Draft 처리"
                echo ""
                echo "3. 또는 Git 명령어로 이전 베타 태그 삭제:"
                echo "   git tag -d $previous_beta"
                echo "   git push origin :refs/tags/$previous_beta"
                echo ""
                echo "4. 워크플로우 재실행 또는 새로운 PR 생성"
                echo ""
              elif [ "$http_code" = "403" ]; then
                echo ""
                echo "🔒 GitHub API 권한 오류 (HTTP 403)"
                echo "토큰 권한을 확인하거나 잠시 후 재시도하세요."
                echo ""
              elif [ "$http_code" = "429" ]; then
                echo ""
                echo "⏰ GitHub API 요청 제한 (HTTP 429)"
                echo "잠시 후 Re-run job을 시도하세요."
                echo ""
              fi
            fi
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "release_id=" >> $GITHUB_OUTPUT
            echo "이전 베타 릴리즈가 없음"
          fi

      - name: Delete Previous Beta Release
        run: |
          has_previous="${{ needs.version-management.outputs.has_previous_beta }}"
          previous_beta="${{ needs.version-management.outputs.previous_beta }}"
          release_id="${{ steps.get-previous-notes.outputs.release_id }}"
          
          if [[ "$has_previous" == "true" ]] && [[ ! -z "$previous_beta" ]]; then
            echo "이전 베타 릴리즈 삭제 중: $previous_beta"
            echo "사용할 릴리즈 ID: $release_id"
            
            # 이전 스텝에서 가져온 릴리즈 ID 사용
            if [ ! -z "$release_id" ] && [ "$release_id" != "null" ] && [ "$release_id" != "empty" ]; then
              echo "릴리즈 ID $release_id 삭제 시도 중..."
              
              delete_response=$(curl -s -w "HTTPSTATUS:%{http_code}" \
                -X DELETE \
                -H "Authorization: token ${{ secrets.ADMIN_TOKEN }}" \
                "https://api.github.com/repos/${{ github.repository }}/releases/$release_id")
              
              delete_http_code=$(echo "$delete_response" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
              delete_body=$(echo "$delete_response" | sed -e 's/HTTPSTATUS:.*//g')
              
              echo "삭제 API HTTP 상태 코드: $delete_http_code"
              
              if [ "$delete_http_code" = "204" ]; then
                echo "이전 베타 릴리즈 삭제 완료: $release_id"
                
                # 릴리즈 삭제 성공 후 태그도 삭제
                echo "이전 베타 태그 삭제 중: $previous_beta"
                git tag -d "$previous_beta" 2>/dev/null || echo "로컬 태그가 없거나 이미 삭제됨"
                git push origin ":refs/tags/$previous_beta" 2>/dev/null || echo "원격 태그가 없거나 이미 삭제됨"
                echo "이전 베타 태그 삭제 완료: $previous_beta"
              else
                echo "릴리즈 삭제 실패: HTTP $delete_http_code"
                echo "응답: $delete_body"
                
                # 서버 오류 시 수동 처리 가이드 제공
                if [[ "$delete_http_code" =~ ^5[0-9][0-9]$ ]]; then
                  echo ""
                  echo "🚨 GitHub API 서버 오류 (HTTP $delete_http_code) 감지!"
                  echo "Re-run job을 해도 동일한 오류가 발생할 가능성이 높습니다."
                  echo ""
                  echo "📋 수동 처리 방법:"
                  echo "1. GitHub 릴리즈 페이지에서 직접 삭제:"
                  echo "   https://github.com/${{ github.repository }}/releases/tag/$previous_beta"
                  echo ""
                  echo "2. 또는 Git 명령어로 태그 삭제:"
                  echo "   git tag -d $previous_beta"
                  echo "   git push origin :refs/tags/$previous_beta"
                  echo ""
                  echo "3. 급한 경우 릴리즈를 Draft 상태로 수동 변경"
                  echo ""
                  echo "⚠️  서버 오류가 해결될 때까지 기다리는 것을 권장합니다."
                  echo ""
                elif [ "$delete_http_code" = "403" ]; then
                  echo ""
                  echo "🔒 GitHub API 권한 오류 (HTTP 403)"
                  echo "토큰 권한을 확인하거나 수동으로 릴리즈를 삭제하세요:"
                  echo "   https://github.com/${{ github.repository }}/releases/tag/$previous_beta"
                  echo ""
                elif [ "$delete_http_code" = "429" ]; then
                  echo ""
                  echo "⏰ GitHub API 요청 제한 (HTTP 429)"
                  echo "잠시 후 Re-run job을 시도하거나 수동으로 처리하세요."
                  echo ""
                else
                  # 대안: 릴리즈를 Draft로 변경
                  echo "대안으로 릴리즈를 Draft 상태로 변경 시도..."
                  draft_response=$(curl -s -w "HTTPSTATUS:%{http_code}" \
                    -X PATCH \
                    -H "Authorization: token ${{ secrets.ADMIN_TOKEN }}" \
                    -H "Content-Type: application/json" \
                    -d '{"draft": true}' \
                    "https://api.github.com/repos/${{ github.repository }}/releases/$release_id")
                  
                  draft_http_code=$(echo "$draft_response" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
                  
                  if [ "$draft_http_code" = "200" ]; then
                    echo "릴리즈를 Draft 상태로 변경 완료"
                    
                    # Draft 처리 성공 후 태그도 삭제
                    echo "이전 베타 태그 삭제 중: $previous_beta"
                    git tag -d "$previous_beta" 2>/dev/null || echo "로컬 태그가 없거나 이미 삭제됨"
                    git push origin ":refs/tags/$previous_beta" 2>/dev/null || echo "원격 태그가 없거나 이미 삭제됨"
                    echo "이전 베타 태그 삭제 완료: $previous_beta"
                  elif [[ "$draft_http_code" =~ ^5[0-9][0-9]$ ]]; then
                    echo "Draft 변경도 서버 오류로 실패: HTTP $draft_http_code"
                    echo ""
                    echo "🚨 GitHub API 서버에 문제가 있는 것 같습니다."
                    echo "📋 수동으로 GitHub 웹사이트에서 릴리즈를 Draft 처리하세요:"
                    echo "   https://github.com/${{ github.repository }}/releases/tag/$previous_beta"
                    echo ""
                  else
                    echo "Draft 변경도 실패: HTTP $draft_http_code"
                  fi
                fi
              fi
            else
              echo "유효한 릴리즈 ID가 없음 - 릴리즈는 삭제할 수 없음"
              echo "이전 스텝에서 릴리즈를 찾지 못했거나 이미 삭제됨"
              
              # 릴리즈는 없지만 태그는 있을 수 있으므로 태그만 삭제 시도
              echo "이전 베타 태그만 삭제 시도: $previous_beta"
              git tag -d "$previous_beta" 2>/dev/null || echo "로컬 태그가 없거나 이미 삭제됨"
              git push origin ":refs/tags/$previous_beta" 2>/dev/null || echo "원격 태그가 없거나 이미 삭제됨"
              echo "이전 베타 태그 삭제 시도 완료: $previous_beta"
            fi
          else
            echo "삭제할 이전 베타 릴리즈가 없음"
          fi

      - name: Generate Beta Release Notes
        run: |
          BETA_TAG="${{ needs.version-management.outputs.beta_tag }}"
          VERSION="${BETA_TAG#v}"
          
          echo "## 베타 릴리즈 노트" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "버전: $VERSION" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          
          # 새로운 변경 사항 추가
          echo "### 최신 변경 사항" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          git log -1 --pretty=format:"- %s" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          
          # 이전 베타 릴리즈의 변경 사항 추가 (있는 경우)
          if [[ "${{ steps.get-previous-notes.outputs.has_changes }}" == "true" ]]; then
            echo "### 이전 변경 사항" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "${{ steps.get-previous-notes.outputs.previous_changes }}" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          fi

      - name: Create Beta Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.ADMIN_TOKEN }}
        with:
          files: |
            artifacts/**/*.apk
            artifacts/**/output-metadata.json
          tag_name: ${{ needs.version-management.outputs.beta_tag }}
          name: "Beta Release ${{ needs.version-management.outputs.beta_tag }}"
          body_path: CHANGELOG.md
          draft: false
          prerelease: true

  # 정식 릴리즈 생성 (main 브랜치 머지 시)
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-for-deploy, create-release-tag]
    if: |
      github.event_name == 'pull_request_target' && 
      github.event.pull_request.merged == true && 
      github.base_ref == 'main'
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.create-release-tag.outputs.release_tag }}
          fetch-depth: 0
          token: ${{ secrets.ADMIN_TOKEN }}
        
      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build-for-deploy.outputs.artifact_name }}
          path: artifacts

      - name: Generate Release Notes
        run: |
          RELEASE_TAG="${{ needs.create-release-tag.outputs.release_tag }}"
          VERSION="${RELEASE_TAG#v}"
          
          echo "## 릴리즈 노트" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "버전: $VERSION" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          
          previous_tag=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$previous_tag" ]; then
            git log --pretty=format:"- %s" >> CHANGELOG.md
          else
            git log --pretty=format:"- %s" ${previous_tag}..HEAD >> CHANGELOG.md
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.ADMIN_TOKEN }}
        with:
          files: |
            artifacts/**/*.apk
            artifacts/**/output-metadata.json
          tag_name: ${{ needs.create-release-tag.outputs.release_tag }}
          name: "Release ${{ needs.create-release-tag.outputs.release_tag }}"
          body_path: CHANGELOG.md
          draft: false
          prerelease: false 