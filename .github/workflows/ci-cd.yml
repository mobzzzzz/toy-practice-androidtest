name: CI/CD

on:
  pull_request:
    branches: [ "main", "dev" ]
  pull_request_target:
    types: [closed]
    branches: ["dev", "main"]

# PR이 머지되기 전에 모든 체크가 통과되어야 함을 명시
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # 코드 검증 작업
  validate:
    if: |
      github.event_name == 'pull_request' && 
      !github.event.pull_request.merged
    name: Validate Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Check code style
        run: ./gradlew spotlessCheck
        
      - name: Run Android Lint
        run: ./gradlew lint
        
      - name: Upload Lint Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lint-report
          path: app/build/reports/lint-results-debug.html

  # PR 검증용 테스트 작업
  test-and-build:
    name: Test and Build
    needs: [validate]
    if: |
      github.event_name == 'pull_request' && 
      !github.event.pull_request.merged
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Run Unit Tests
        run: ./gradlew testDebugUnitTest
        
      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: app/build/reports/tests/testDebugUnitTest/

  # 배포용 빌드 작업
  build-for-deploy:
    name: Build for Deploy
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request_target' && 
      github.event.pull_request.merged == true
    outputs:
      build_type: ${{ github.base_ref == 'main' && 'release' || 'debug' }}
      timestamp: ${{ steps.set-timestamp.outputs.value }}
      artifact_name: ${{ steps.set-artifact-name.outputs.value }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.merge_commit_sha }}
          fetch-depth: 0
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Run Unit Tests
        run: ./gradlew testDebugUnitTest
        
      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-deploy
          path: app/build/reports/tests/testDebugUnitTest/

      - name: Set Timestamp
        id: set-timestamp
        run: echo "value=$(date +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT

      - name: Set Artifact Name
        id: set-artifact-name
        run: |
          if [[ "${{ github.base_ref }}" == "main" ]]; then
            echo "value=release-build" >> $GITHUB_OUTPUT
          else
            echo "value=beta-build" >> $GITHUB_OUTPUT
          fi

      - name: Build APK
        env:
          VERSION_CODE: ${{ vars.VERSION_CODE }}
          BUILD_TIMESTAMP: ${{ steps.set-timestamp.outputs.value }}
        run: |
          if [[ "${{ github.base_ref }}" == "main" ]]; then
            ./gradlew assembleRelease -Prelease
          else
            ./gradlew assembleDebug
          fi

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.set-artifact-name.outputs.value }}
          path: |
            app/build/outputs/apk/**/*.apk
            app/build/outputs/apk/**/output-metadata.json
          retention-days: 1

  # 버전 관리 작업 (dev 브랜치 머지 시에만)
  version-management:
    name: Version Management
    runs-on: ubuntu-latest
    needs: [build-for-deploy]
    if: |
      github.event_name == 'pull_request_target' && 
      github.event.pull_request.merged == true && 
      github.base_ref == 'dev'
    permissions:
      contents: write
      actions: write
    outputs:
      version_code: ${{ vars.VERSION_CODE }}
      beta_tag: ${{ steps.create-beta-tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.merge_commit_sha }}
          token: ${{ secrets.ADMIN_TOKEN }}

      - name: Update Version Code
        id: version-update
        uses: actions/github-script@v7
        env:
          GH_TOKEN: ${{ secrets.ADMIN_TOKEN }}
        with:
          github-token: ${{ secrets.ADMIN_TOKEN }}
          script: |
            const currentVersion = parseInt('${{ vars.VERSION_CODE }}') || 0;
            const newVersion = currentVersion + 1;
            
            await github.rest.actions.updateRepoVariable({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'VERSION_CODE',
              value: newVersion.toString()
            });
            
            console.log(`Version Code updated: ${currentVersion} → ${newVersion}`);
            core.setOutput('new_version', newVersion.toString());

      - name: Create Beta Tag
        id: create-beta-tag
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          
          latest_tag=$(git tag -l "v*" | grep -v "beta" | sort -V | tail -n 1)
          if [ -z "$latest_tag" ]; then
            major=1
            minor=0
            patch=0
          else
            version=${latest_tag#v}
            IFS='.' read -r major minor patch <<< "$version"
            patch=$((patch + 1))
          fi
          
          next_version="$major.$minor.$patch"
          beta_tag="v$next_version-beta.${{ needs.build-for-deploy.outputs.timestamp }}"
          echo "tag=$beta_tag" >> $GITHUB_OUTPUT
          
          echo "Creating beta tag: $beta_tag"
          git tag -a "$beta_tag" -m "Beta release $beta_tag"
          git push origin "$beta_tag"

  # main 브랜치 머지 시 릴리즈 태그 생성
  create-release-tag:
    name: Create Release Tag
    runs-on: ubuntu-latest
    needs: [build-for-deploy]
    if: |
      github.event_name == 'pull_request_target' && 
      github.event.pull_request.merged == true && 
      github.base_ref == 'main'
    permissions:
      contents: write
    outputs:
      release_tag: ${{ steps.create-release-tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.merge_commit_sha }}
          token: ${{ secrets.ADMIN_TOKEN }}

      - name: Create Release Tag
        id: create-release-tag
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          
          latest_beta=$(git tag -l "v*-beta*" | sort -V | tail -n 1)
          if [ -z "$latest_beta" ]; then
            echo "No beta tag found"
            exit 1
          fi
          
          version=$(echo $latest_beta | sed 's/^v\(.*\)-beta\..*/\1/')
          release_tag="v$version"
          echo "tag=$release_tag" >> $GITHUB_OUTPUT
          
          echo "Creating release tag: $release_tag"
          git tag -a "$release_tag" -m "Release $release_tag"
          git push origin "$release_tag"

  # 베타 릴리즈 생성 (dev 브랜치 머지 시)
  create-beta-release:
    name: Create Beta Release
    runs-on: ubuntu-latest
    needs: [build-for-deploy, version-management]
    if: |
      github.event_name == 'pull_request_target' && 
      github.event.pull_request.merged == true && 
      github.base_ref == 'dev'
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.merge_commit_sha }}
          fetch-depth: 0
          token: ${{ secrets.ADMIN_TOKEN }}
        
      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build-for-deploy.outputs.artifact_name }}
          path: .

      - name: Generate Beta Release Notes
        run: |
          echo "## 베타 릴리즈 노트" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "버전: ${needs.version-management.outputs.beta_tag#v}" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          
          previous_tag=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$previous_tag" ]; then
            git log --pretty=format:"- %s" >> CHANGELOG.md
          else
            git log --pretty=format:"- %s" ${previous_tag}..HEAD >> CHANGELOG.md
          fi

      - name: Create Beta Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.ADMIN_TOKEN }}
        with:
          files: |
            **/*.apk
            **/output-metadata.json
          tag_name: ${{ needs.version-management.outputs.beta_tag }}
          name: "Beta Release ${{ needs.version-management.outputs.beta_tag }}"
          body_path: CHANGELOG.md
          draft: false
          prerelease: true

  # 정식 릴리즈 생성 (main 브랜치 머지 시)
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-for-deploy, create-release-tag]
    if: |
      github.event_name == 'pull_request_target' && 
      github.event.pull_request.merged == true && 
      github.base_ref == 'main'
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.merge_commit_sha }}
          fetch-depth: 0
          token: ${{ secrets.ADMIN_TOKEN }}
        
      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build-for-deploy.outputs.artifact_name }}
          path: .

      - name: Generate Release Notes
        run: |
          echo "## 릴리즈 노트" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "버전: ${needs.create-release-tag.outputs.release_tag#v}" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          
          previous_tag=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$previous_tag" ]; then
            git log --pretty=format:"- %s" >> CHANGELOG.md
          else
            git log --pretty=format:"- %s" ${previous_tag}..HEAD >> CHANGELOG.md
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.ADMIN_TOKEN }}
        with:
          files: |
            **/*.apk
            **/output-metadata.json
          tag_name: ${{ needs.create-release-tag.outputs.release_tag }}
          name: "Release ${{ needs.create-release-tag.outputs.release_tag }}"
          body_path: CHANGELOG.md
          draft: false
          prerelease: false 