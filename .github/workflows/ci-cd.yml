name: CI/CD

on:
  pull_request:
    branches: [ "main", "dev" ]
  pull_request_target:
    types: [closed]
    branches: ["dev", "main"]
  push:
    branches: ["main"]
    tags:
      - 'v*'

# PR이 머지되기 전에 모든 체크가 통과되어야 함을 명시
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # 코드 검증 작업
  validate:
    if: |
      github.event_name == 'pull_request' && 
      !github.event.pull_request.merged
    name: Validate Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Check code style
        run: ./gradlew spotlessCheck
        
      - name: Run Android Lint
        run: ./gradlew lint
        
      - name: Upload Lint Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lint-report
          path: app/build/reports/lint-results-debug.html

  # 테스트 및 빌드 작업 (통합)
  test-and-build:
    name: Test and Build
    runs-on: ubuntu-latest
    needs: [validate]
    if: |
      (github.event_name == 'pull_request' && !github.event.pull_request.merged) ||
      (github.event_name == 'pull_request_target' && github.event.pull_request.merged == true)
    outputs:
      apk_path: ${{ steps.build-apk.outputs.apk_path }}
      build_type: ${{ steps.set-build-type.outputs.build_type }}
      version_name: ${{ steps.set-version.outputs.version_name }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.merge_commit_sha }}
          fetch-depth: 0
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Run Unit Tests
        run: ./gradlew testDebugUnitTest
        
      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: app/build/reports/tests/testDebugUnitTest/

      # 버전 정보 설정
      - name: Set Version Info
        id: set-version
        run: |
          # 최신 태그에서 버전 정보 추출
          latest_tag=$(git tag -l "v*" | grep -v "beta" | sort -V | tail -n 1)
          if [ -z "$latest_tag" ]; then
            major=1
            minor=0
            patch=0
          else
            version=${latest_tag#v}  # v 제거
            IFS='.' read -r major minor patch <<< "$version"
          fi
          
          if [[ "${{ github.base_ref }}" == "main" ]]; then
            # main 브랜치는 현재 태그 버전 사용
            version_name="$major.$minor.$patch"
            echo "version_name=$version_name" >> $GITHUB_OUTPUT
            echo "build_type=release" >> $GITHUB_OUTPUT
          else
            # dev 브랜치는 beta 태그 추가
            timestamp=$(date +%Y%m%d%H%M%S)
            version_name="$major.$minor.$patch-beta.$timestamp"
            echo "version_name=$version_name" >> $GITHUB_OUTPUT
            echo "build_type=debug" >> $GITHUB_OUTPUT
          fi
          
          # version.properties 파일 생성
          echo "VERSION_CODE=${{ vars.VERSION_CODE }}" > version.properties
          echo "VERSION_MAJOR=$major" >> version.properties
          echo "VERSION_MINOR=$minor" >> version.properties
          echo "VERSION_PATCH=$patch" >> version.properties
          if [[ "${{ github.base_ref }}" == "main" ]]; then
            echo "IS_BETA=false" >> version.properties
          else
            echo "IS_BETA=true" >> version.properties
            echo "TIMESTAMP=$timestamp" >> version.properties
          fi

      # APK 빌드
      - name: Build APK
        id: build-apk
        run: |
          if [[ "${{ steps.set-version.outputs.build_type }}" == "release" ]]; then
            ./gradlew assembleRelease
            APK_DIR="app/build/outputs/apk/release"
          else
            ./gradlew assembleDebug
            APK_DIR="app/build/outputs/apk/debug"
          fi
          
          # APK 파일 찾기
          APK_FILE=$(find "$APK_DIR" -name "*.apk" -type f)
          if [ ! -z "$APK_FILE" ]; then
            echo "APK built successfully at: $APK_FILE"
            echo "apk_path=$APK_FILE" >> $GITHUB_OUTPUT
          else
            echo "Error: APK not found in $APK_DIR"
            exit 1
          fi

      # 빌드 결과물 저장
      - name: Upload Build Artifact
        if: |
          github.event_name == 'pull_request_target' && 
          github.event.pull_request.merged == true
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: |
            app/build/outputs/apk/
            version.properties
          retention-days: 1

  # 버전 관리 작업 (dev 브랜치 머지 시에만)
  version-management:
    name: Version Management
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request_target' && 
      github.event.pull_request.merged == true && 
      github.base_ref == 'dev'
    needs: [test-and-build]
    permissions:
      contents: write
      actions: write
    outputs:
      version_code: ${{ steps.version-update.outputs.new_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.merge_commit_sha }}

      - name: Update Version Code
        id: version-update
        uses: actions/github-script@v7
        env:
          GH_TOKEN: ${{ secrets.ADMIN_TOKEN }}
        with:
          github-token: ${{ secrets.ADMIN_TOKEN }}
          script: |
            const currentVersion = parseInt('${{ vars.VERSION_CODE }}') || 0;
            const newVersion = currentVersion + 1;
            
            await github.rest.actions.updateRepoVariable({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'VERSION_CODE',
              value: newVersion.toString()
            });
            
            console.log(`Version Code updated: ${currentVersion} → ${newVersion}`);
            core.setOutput('new_version', newVersion.toString());

      - name: Create Beta Tag
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          
          version="${{ needs.test-and-build.outputs.version_name }}"
          echo "Creating beta tag: $version"
          git tag -a "v$version" -m "Beta release v$version"
          git push origin "v$version"

  # main 브랜치 머지 시 릴리즈 태그 생성
  create-release:
    name: Create Release Tag
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request_target' && 
      github.event.pull_request.merged == true && 
      github.base_ref == 'main'
    needs: [test-and-build]
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.merge_commit_sha }}

      - name: Create Release Tag
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          
          version="${{ needs.test-and-build.outputs.version_name }}"
          echo "Creating release tag: $version"
          git tag -a "v$version" -m "Release v$version"
          git push origin "v$version"

  # 배포 작업
  deploy:
    name: Deploy APK
    runs-on: ubuntu-latest
    needs: [test-and-build]
    if: |
      (github.event_name == 'pull_request_target' && 
       github.event.pull_request.merged == true) ||
      (github.event_name == 'push' && 
       startsWith(github.ref, 'refs/tags/v'))
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.merge_commit_sha }}
          fetch-depth: 0
        
      # 빌드 결과물 다운로드
      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: .

      # 릴리즈 노트 생성
      - name: Generate Release Notes
        id: release_notes
        run: |
          version="${{ needs.test-and-build.outputs.version_name }}"
          previous_tag=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          echo "## 변경 사항" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "버전: $version" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          
          if [ -z "$previous_tag" ]; then
            git log --pretty=format:"- %s" >> CHANGELOG.md
          else
            git log --pretty=format:"- %s" ${previous_tag}..HEAD >> CHANGELOG.md
          fi

      # GitHub 릴리즈 생성
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            app/build/outputs/apk/**/*.apk
          tag_name: "v${{ needs.test-and-build.outputs.version_name }}"
          name: "v${{ needs.test-and-build.outputs.version_name }}"
          body_path: CHANGELOG.md
          draft: false
          prerelease: ${{ github.base_ref != 'main' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 