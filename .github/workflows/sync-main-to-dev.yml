name: Sync Main to Dev

on:
  # main 브랜치에 push될 때만 (태그는 제외)
  push:
    branches: [main]
  
  # 수동 실행도 가능하도록
  workflow_dispatch:
    inputs:
      force_sync:
        description: 'Force sync even if no changes'
        required: false
        default: false
        type: boolean

# 동시 실행 방지
concurrency:
  group: "sync-main-to-dev"
  cancel-in-progress: false

jobs:
  sync-branches:
    name: Sync Main to Dev
    runs-on: ubuntu-latest
    # 태그 push는 제외 (릴리즈 태그 생성 시 중복 실행 방지)
    if: github.ref_type != 'tag'
    permissions:
      contents: write
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.ADMIN_TOKEN }}
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: Check if sync is needed
        id: check-sync
        run: |
          echo "🔍 동기화 필요성 확인 중..."
          
          # 태그 이벤트인 경우 스킵
          if [ "${{ github.ref_type }}" == "tag" ]; then
            echo "⏭️ 태그 이벤트는 스킵 (중복 실행 방지)"
            echo "sync_needed=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # 최신 상태로 업데이트
          git fetch origin
          
          # main과 dev의 차이점 확인 및 분석
          main_commits=$(git rev-list origin/dev..origin/main --count)
          dev_commits=$(git rev-list origin/main..origin/dev --count)
          
          echo "📊 브랜치 상태 분석:"
          echo "- main에만 있는 커밋: $main_commits개"
          echo "- dev에만 있는 커밋: $dev_commits개"
          
          if [ "$main_commits" -eq 0 ]; then
            echo "✅ dev 브랜치가 이미 최신 상태입니다"
            if [ "${{ github.event.inputs.force_sync }}" != "true" ]; then
              echo "sync_needed=false" >> $GITHUB_OUTPUT
              exit 0
            else
              echo "🔄 강제 동기화 요청됨"
              echo "sync_needed=true" >> $GITHUB_OUTPUT
            fi
          else
            echo "📥 동기화 필요: main에 $main_commits개의 새로운 커밋이 있음"
            if [ "$dev_commits" -gt 0 ]; then
              echo "⚠️ 주의: dev에도 $dev_commits개의 독립적인 커밋이 있음 (충돌 가능성)"
            fi
            echo "sync_needed=true" >> $GITHUB_OUTPUT
          fi

      - name: Attempt automatic sync
        if: steps.check-sync.outputs.sync_needed == 'true'
        id: auto-sync
        run: |
          echo "🔄 main → dev 자동 동기화 시작..."
          echo "📋 전략: 깔끔한 히스토리 유지 (불필요한 merge 커밋 방지)"
          
          # dev 브랜치로 전환
          git checkout dev
          git reset --hard origin/dev
          
          # Fast-forward 가능한지 정확히 확인
          dev_commits=$(git rev-list origin/main..origin/dev --count)
          
          if [ "$dev_commits" -eq 0 ]; then
            echo "✅ Fast-forward 병합 가능 (dev에 독립적인 커밋 없음)"
            # Fast-forward merge (커밋 기록 없음)
            if git merge origin/main --ff-only; then
              echo "✅ Fast-forward 병합 성공 (커밋 기록 없음)"
              git push origin dev
              echo "🎉 동기화 완료!"
              echo "sync_success=true" >> $GITHUB_OUTPUT
              echo "merge_type=fast-forward" >> $GITHUB_OUTPUT
            else
              echo "❌ Fast-forward 실패 (예상치 못한 오류)"
              echo "sync_success=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "⚠️ Fast-forward 불가능 - dev에 $dev_commits개의 독립적인 커밋 존재"
            echo "🔀 일반 병합 시도 (merge 커밋 생성됨)"
            # 일반 merge 시도 (충돌 가능성 있음)
            if git merge origin/main --no-edit; then
              echo "✅ 일반 병합 성공"
              git push origin dev
              echo "🎉 동기화 완료!"
              echo "sync_success=true" >> $GITHUB_OUTPUT
              echo "merge_type=merge" >> $GITHUB_OUTPUT
            else
              echo "❌ 충돌로 인한 병합 실패"
              echo "sync_success=false" >> $GITHUB_OUTPUT
              
              # 충돌 상태 정리
              git merge --abort
              
              # 충돌 파일들 확인
              git checkout dev
              git merge origin/main --no-commit --no-ff || true
              conflict_files=$(git diff --name-only --diff-filter=U 2>/dev/null || echo "알 수 없음")
              git merge --abort 2>/dev/null || true
              
              echo "conflict_files=$conflict_files" >> $GITHUB_OUTPUT
              echo "merge_type=conflict" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Create summary
        if: always()
        run: |
          echo "## 🔄 브랜치 동기화 요약" >> $GITHUB_STEP_SUMMARY
          echo "- **소스**: main" >> $GITHUB_STEP_SUMMARY
          echo "- **타겟**: dev" >> $GITHUB_STEP_SUMMARY
          echo "- **이벤트**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **참조**: ${{ github.ref }}" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.ref_type }}" == "tag" ]; then
            echo "- **상태**: ⏭️ 스킵됨 (태그 이벤트 - 중복 실행 방지)" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ steps.check-sync.outputs.sync_needed }}" == "false" ]; then
            echo "- **상태**: ✅ 이미 최신 상태" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ steps.auto-sync.outputs.sync_success }}" == "true" ]; then
            if [ "${{ steps.auto-sync.outputs.merge_type }}" == "fast-forward" ]; then
              echo "- **상태**: ✅ Fast-forward 동기화 성공 (커밋 기록 없음)" >> $GITHUB_STEP_SUMMARY
              echo "- **방식**: 🚀 Fast-forward (깔끔한 히스토리)" >> $GITHUB_STEP_SUMMARY
            else
              echo "- **상태**: ✅ 일반 병합 동기화 성공" >> $GITHUB_STEP_SUMMARY
              echo "- **방식**: 🔀 Merge commit (필요에 의한 병합)" >> $GITHUB_STEP_SUMMARY
            fi
          elif [ "${{ steps.auto-sync.outputs.sync_success }}" == "false" ]; then
            echo "- **상태**: ⚠️ 충돌 감지 - 수동 동기화 필요" >> $GITHUB_STEP_SUMMARY
            echo "- **충돌 파일**: ${{ steps.auto-sync.outputs.conflict_files }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 📋 수동 해결 방법:" >> $GITHUB_STEP_SUMMARY
            echo "1. 로컬에서 \`git checkout dev\` 실행" >> $GITHUB_STEP_SUMMARY
            echo "2. \`git merge main\` 실행하여 충돌 확인" >> $GITHUB_STEP_SUMMARY
            echo "3. **충돌 해결 시 main 브랜치 우선 선택** (hotfix, release 보존)" >> $GITHUB_STEP_SUMMARY
            echo "   - 중요한 변경사항: \`git checkout --theirs <파일명>\` (main 선택)" >> $GITHUB_STEP_SUMMARY
            echo "   - 개발 변경사항: 수동으로 병합하여 보존" >> $GITHUB_STEP_SUMMARY
            echo "4. \`git add .\` 실행" >> $GITHUB_STEP_SUMMARY
            echo "5. \`git commit\` 실행 (기본 메시지 사용)" >> $GITHUB_STEP_SUMMARY
            echo "6. \`git push origin dev\` 실행" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **상태**: ❌ 동기화 실패" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "- **시간**: $(date)" >> $GITHUB_STEP_SUMMARY 