name: Sync Main to Dev

on:
  # main 브랜치에 push될 때만 (태그는 제외)
  push:
    branches: [main]
  
  # 수동 실행도 가능하도록
  workflow_dispatch:
    inputs:
      force_sync:
        description: 'Force sync even if no changes'
        required: false
        default: false
        type: boolean

# 동시 실행 방지
concurrency:
  group: "sync-main-to-dev"
  cancel-in-progress: false

jobs:
  sync-branches:
    name: Sync Main to Dev
    runs-on: ubuntu-latest
    # 태그 push는 제외 (릴리즈 태그 생성 시 중복 실행 방지)
    if: github.ref_type != 'tag'
    permissions:
      contents: write
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.ADMIN_TOKEN }}
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: Check if sync is needed
        id: check-sync
        run: |
          echo "🔍 동기화 필요성 확인 중..."
          
          # 태그 이벤트인 경우 스킵
          if [ "${{ github.ref_type }}" == "tag" ]; then
            echo "⏭️ 태그 이벤트는 스킵 (중복 실행 방지)"
            echo "sync_needed=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # 최신 상태로 업데이트
          git fetch origin
          
          # main과 dev의 차이점 확인
          if git merge-base --is-ancestor origin/main origin/dev; then
            echo "✅ dev 브랜치가 이미 최신 상태입니다"
            if [ "${{ github.event.inputs.force_sync }}" != "true" ]; then
              echo "sync_needed=false" >> $GITHUB_OUTPUT
              exit 0
            else
              echo "🔄 강제 동기화 요청됨"
              echo "sync_needed=true" >> $GITHUB_OUTPUT
            fi
          else
            echo "📥 동기화 필요: dev가 main보다 뒤처져 있음"
            echo "sync_needed=true" >> $GITHUB_OUTPUT
          fi

      - name: Attempt automatic sync
        if: steps.check-sync.outputs.sync_needed == 'true'
        id: auto-sync
        run: |
          echo "🔄 main → dev 자동 동기화 시작..."
          
          # dev 브랜치로 전환
          git checkout dev
          git reset --hard origin/dev
          
          # main의 변경사항을 dev에 병합 시도
          if git merge origin/main --no-edit; then
            echo "✅ 자동 병합 성공"
            git push origin dev
            echo "🎉 동기화 완료!"
            echo "sync_success=true" >> $GITHUB_OUTPUT
          else
            echo "❌ 충돌로 인한 자동 병합 실패"
            echo "sync_success=false" >> $GITHUB_OUTPUT
            
            # 충돌 상태 정리
            git merge --abort
            
            # 충돌 파일들 확인
            git checkout dev
            git merge origin/main --no-commit --no-ff || true
            conflict_files=$(git diff --name-only --diff-filter=U 2>/dev/null || echo "알 수 없음")
            git merge --abort 2>/dev/null || true
            
            echo "conflict_files=$conflict_files" >> $GITHUB_OUTPUT
          fi

      - name: Create summary
        if: always()
        run: |
          echo "## 🔄 브랜치 동기화 요약" >> $GITHUB_STEP_SUMMARY
          echo "- **소스**: main" >> $GITHUB_STEP_SUMMARY
          echo "- **타겟**: dev" >> $GITHUB_STEP_SUMMARY
          echo "- **이벤트**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **참조**: ${{ github.ref }}" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.ref_type }}" == "tag" ]; then
            echo "- **상태**: ⏭️ 스킵됨 (태그 이벤트 - 중복 실행 방지)" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ steps.check-sync.outputs.sync_needed }}" == "false" ]; then
            echo "- **상태**: ✅ 이미 최신 상태" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ steps.auto-sync.outputs.sync_success }}" == "true" ]; then
            echo "- **상태**: ✅ 자동 동기화 성공" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ steps.auto-sync.outputs.sync_success }}" == "false" ]; then
            echo "- **상태**: ⚠️ 충돌 감지 - 수동 동기화 필요" >> $GITHUB_STEP_SUMMARY
            echo "- **충돌 파일**: ${{ steps.auto-sync.outputs.conflict_files }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 📋 수동 해결 방법:" >> $GITHUB_STEP_SUMMARY
            echo "1. 로컬에서 \`git checkout dev\` 실행" >> $GITHUB_STEP_SUMMARY
            echo "2. \`git merge main\` 실행하여 충돌 확인" >> $GITHUB_STEP_SUMMARY
            echo "3. 충돌 파일들을 수동으로 해결" >> $GITHUB_STEP_SUMMARY
            echo "4. \`git add .\` 및 \`git commit\` 실행" >> $GITHUB_STEP_SUMMARY
            echo "5. \`git push origin dev\` 실행" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **상태**: ❌ 동기화 실패" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "- **시간**: $(date)" >> $GITHUB_STEP_SUMMARY 