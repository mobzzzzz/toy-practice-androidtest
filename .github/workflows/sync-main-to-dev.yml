name: Sync Main to Dev

on:
  # main 브랜치에 push될 때만 (태그는 제외)
  push:
    branches: [main]
  
  # 수동 실행도 가능하도록
  workflow_dispatch:
    inputs:
      force_sync:
        description: 'Force sync even if no changes'
        required: false
        default: false
        type: boolean

# 동시 실행 방지
concurrency:
  group: "sync-main-to-dev"
  cancel-in-progress: false

jobs:
  sync-branches:
    name: Sync Main to Dev
    runs-on: ubuntu-latest
    # 태그 push는 제외 (릴리즈 태그 생성 시 중복 실행 방지)
    if: github.ref_type != 'tag'
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          # ADMIN_TOKEN 사용으로 branch protection 우회
          token: ${{ secrets.ADMIN_TOKEN }}
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: Check if sync is needed
        id: check-sync
        run: |
          echo "🔍 Checking if synchronization is needed..."
          echo "📋 Event: ${{ github.event_name }}"
          echo "📋 Ref: ${{ github.ref }}"
          echo "📋 Ref Type: ${{ github.ref_type }}"
          
          # 태그 이벤트인 경우 스킵
          if [ "${{ github.ref_type }}" == "tag" ]; then
            echo "⏭️ Skipping sync for tag event to prevent duplicate execution"
            echo "sync_needed=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # 최신 상태로 업데이트
          git fetch origin
          
          # main과 dev의 차이점 확인
          if git merge-base --is-ancestor origin/main origin/dev; then
            echo "✅ Dev is already up to date with main"
            if [ "${{ github.event.inputs.force_sync }}" != "true" ]; then
              echo "sync_needed=false" >> $GITHUB_OUTPUT
              echo "No sync needed. Exiting."
              exit 0
            else
              echo "🔄 Force sync requested"
              echo "sync_needed=true" >> $GITHUB_OUTPUT
            fi
          else
            echo "📥 Sync needed: dev is behind main"
            echo "sync_needed=true" >> $GITHUB_OUTPUT
          fi

      - name: Attempt automatic sync
        if: steps.check-sync.outputs.sync_needed == 'true'
        id: auto-sync
        run: |
          echo "🔄 Starting main → dev synchronization..."
          
          # dev 브랜치로 전환
          git checkout -b temp-sync-branch origin/dev
          
          # 안전성 검사: dev에만 있는 커밋 수 확인
          dev_only_commits=$(git rev-list --count origin/main..origin/dev)
          main_only_commits=$(git rev-list --count origin/dev..origin/main)
          
          echo "📊 Sync Analysis:"
          echo "  - Dev-only commits: $dev_only_commits"
          echo "  - Main-only commits: $main_only_commits"
          
          # 안전한 자동 동기화 조건
          safe_auto_sync=false
          
          if [ "$dev_only_commits" -eq 0 ]; then
            echo "✅ Safe: Dev has no unique commits - can safely fast-forward"
            safe_auto_sync=true
          elif [ "$main_only_commits" -le 3 ] && [ "$dev_only_commits" -le 5 ]; then
            echo "⚠️  Moderate risk: Small changes on both sides - attempting automatic merge"
            safe_auto_sync=true
          else
            echo "🚨 High risk: Significant divergence detected"
            echo "   - Consider manual review for safety"
            safe_auto_sync=false
          fi
          
          echo "auto_sync_decision=$safe_auto_sync" >> $GITHUB_OUTPUT
          
          # main의 변경사항을 임시 브랜치에 병합 시도
          echo "📥 Attempting to merge main into temp branch..."
          if git merge origin/main --no-edit; then
            echo "✅ Automatic merge successful"
            echo "merge_success=true" >> $GITHUB_OUTPUT
            
            if [ "$safe_auto_sync" = "true" ]; then
              # 안전한 경우: 자동 동기화 진행
              echo "🚀 Proceeding with automatic sync (main priority)"
              git checkout dev || git checkout -b dev origin/dev
              git merge temp-sync-branch --ff-only
              git push origin dev
              echo "🎉 Synchronization completed successfully!"
            else
              # 위험한 경우: PR 생성으로 수동 검토 요청
              echo "⚠️  Creating PR for manual review due to high risk"
              echo "merge_success=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "❌ Automatic merge failed due to conflicts"
            echo "merge_success=false" >> $GITHUB_OUTPUT
            
            # 충돌 상태 정리
            git merge --abort
          fi

      - name: Create conflict resolution PR
        if: steps.check-sync.outputs.sync_needed == 'true' && steps.auto-sync.outputs.merge_success == 'false'
        run: |
          echo "🔧 Creating PR for manual conflict resolution..."
          
          # 충돌 해결을 위한 브랜치 생성
          conflict_branch="sync/main-to-dev-$(date +%Y%m%d%H%M%S)"
          git checkout -b $conflict_branch origin/dev
          
          # main의 변경사항을 병합하되 충돌 상태로 유지
          git merge origin/main --no-edit || true
          
          # 충돌 파일들을 확인하고 상태 저장
          echo "## 🔄 Main → Dev 동기화 충돌 해결 필요" > conflict-resolution.md
          echo "" >> conflict-resolution.md
          echo "**트리거 이벤트**: ${{ github.event_name }} (${{ github.ref }})" >> conflict-resolution.md
          echo "" >> conflict-resolution.md
          echo "다음 파일들에서 충돌이 발생했습니다:" >> conflict-resolution.md
          echo "" >> conflict-resolution.md
          git status --porcelain | grep "^UU\|^AA\|^DD" | while read status file; do
            echo "- \`$file\`" >> conflict-resolution.md
          done
          echo "" >> conflict-resolution.md
          echo "### 해결 방법:" >> conflict-resolution.md
          echo "1. 각 충돌 파일을 열어서 충돌 마커를 확인하세요" >> conflict-resolution.md
          echo "2. 적절한 변경사항을 선택하거나 병합하세요" >> conflict-resolution.md
          echo "3. \`git add <파일명>\`으로 해결된 파일을 추가하세요" >> conflict-resolution.md
          echo "4. \`git commit\`으로 병합을 완료하세요" >> conflict-resolution.md
          echo "5. 이 PR을 dev 브랜치로 병합하세요" >> conflict-resolution.md
          
          # 충돌 상태 그대로 커밋
          git add .
          git commit -m "conflict: main → dev 동기화 중 충돌 발생 - 수동 해결 필요

          트리거: ${{ github.event_name }} (${{ github.ref }})
          충돌 파일들:
          $(git status --porcelain | grep '^UU\|^AA\|^DD' | cut -c4-)
          
          해결 후 이 PR을 dev 브랜치로 병합해주세요."
          
          git push origin $conflict_branch
          
          # PR 생성
          gh pr create \
            --base dev \
            --head $conflict_branch \
            --title "🔄 [자동] Main → Dev 동기화 (충돌 해결 필요)" \
            --body-file conflict-resolution.md \
            --label "sync,conflict,hotfix"
          
          echo "📋 충돌 해결 PR이 생성되었습니다."

      - name: Create Sync Summary
        if: always()
        run: |
          echo "## 🔄 Branch Sync Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Source**: main" >> $GITHUB_STEP_SUMMARY
          echo "- **Target**: dev" >> $GITHUB_STEP_SUMMARY
          echo "- **Event**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Ref**: ${{ github.ref }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Ref Type**: ${{ github.ref_type }}" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.ref_type }}" == "tag" ]; then
            echo "- **Status**: ⏭️ Skipped (tag event - prevents duplicate execution)" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ steps.check-sync.outputs.sync_needed }}" == "false" ]; then
            echo "- **Status**: ✅ Already up to date" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ steps.auto-sync.outputs.merge_success }}" == "true" ]; then
            if [ "${{ steps.auto-sync.outputs.auto_sync_decision }}" == "true" ]; then
              echo "- **Status**: ✅ Automatic sync successful (safe conditions met)" >> $GITHUB_STEP_SUMMARY
            else
              echo "- **Status**: ⚠️ Merge possible but PR created for safety review" >> $GITHUB_STEP_SUMMARY
            fi
          elif [ "${{ steps.auto-sync.outputs.merge_success }}" == "false" ]; then
            echo "- **Status**: ⚠️ Conflicts detected - PR created for manual resolution" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Status**: ❌ Sync failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "- **Time**: $(date)" >> $GITHUB_STEP_SUMMARY

      - name: Cleanup
        if: always()
        run: |
          # 임시 브랜치들 정리
          git checkout main 2>/dev/null || true
          git branch -D temp-sync-branch 2>/dev/null || true
          rm -f conflict-resolution.md 2>/dev/null || true 