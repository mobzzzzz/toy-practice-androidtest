name: GitFlow 자동 동기화

on:
  push:
    branches:
      - main
      - 'release/**'
  workflow_dispatch:
    inputs:
      sync_reason:
        description: '동기화 실행 이유'
        required: true
        default: '수동 동기화 요청'

jobs:
  detect-gitflow-changes:
    name: GitFlow 변경사항 감지
    runs-on: ubuntu-latest
    outputs:
      should_sync: ${{ steps.detect.outputs.should_sync }}
      sync_type: ${{ steps.detect.outputs.sync_type }}
      source_branch: ${{ steps.detect.outputs.source_branch }}
      sync_reason: ${{ steps.detect.outputs.sync_reason }}
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: GitFlow 변경사항 감지
        id: detect
        run: |
          echo "🔍 GitFlow 변경사항을 감지합니다..."
          
          should_sync="false"
          sync_type=""
          source_branch=""
          sync_reason=""
          
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "📝 수동 실행: ${{ github.event.inputs.sync_reason }}"
            should_sync="true"
            sync_type="manual"
            source_branch="main"
            sync_reason="${{ github.event.inputs.sync_reason }}"
          
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            current_branch="${{ github.ref_name }}"
            echo "📤 브랜치 푸시 감지: $current_branch"
            
            if [[ "$current_branch" =~ ^release/ ]]; then
              echo "🚀 Release 브랜치에 새 커밋 감지: $current_branch"
              should_sync="true"
              sync_type="release_commit"
              source_branch="$current_branch"
              sync_reason="Release $current_branch 에 새 커밋 추가됨"
            elif [[ "$current_branch" == "main" ]]; then
              # main 브랜치에서 최근 GitFlow 머지 확인
              recent_commits=$(git log --oneline -3 --grep="Merge.*hotfix\|Merge.*release" || echo "")
              if [[ -n "$recent_commits" ]]; then
                echo "🔄 GitFlow 머지 커밋 감지:"
                echo "$recent_commits"
                should_sync="true"
                sync_type="main_push"
                source_branch="main"
                sync_reason="Main 브랜치에 GitFlow 머지 커밋 감지"
              fi
            fi
          fi
          
          echo "should_sync=$should_sync" >> $GITHUB_OUTPUT
          echo "sync_type=$sync_type" >> $GITHUB_OUTPUT
          echo "source_branch=$source_branch" >> $GITHUB_OUTPUT
          echo "sync_reason=$sync_reason" >> $GITHUB_OUTPUT
          
          echo "📊 감지 결과:"
          echo "  - 동기화 필요: $should_sync"
          echo "  - 동기화 타입: $sync_type"
          echo "  - 소스 브랜치: $source_branch"
          echo "  - 동기화 이유: $sync_reason"

  sync-to-dev:
    name: Dev 브랜치 안전 동기화
    runs-on: ubuntu-latest
    needs: detect-gitflow-changes
    if: needs.detect-gitflow-changes.outputs.should_sync == 'true'
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.ADMIN_TOKEN }}

      - name: Git 설정
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: 안전한 Fast-forward 동기화
        run: |
          echo "🔒 GitFlow 안전 동기화를 시작합니다..."
          echo "📋 동기화 정보:"
          echo "  - 타입: ${{ needs.detect-gitflow-changes.outputs.sync_type }}"
          echo "  - 소스: ${{ needs.detect-gitflow-changes.outputs.source_branch }}"
          echo "  - 이유: ${{ needs.detect-gitflow-changes.outputs.sync_reason }}"
          
          # 원격 브랜치 정보 업데이트
          git fetch origin
          
          # Dev 브랜치 체크아웃
          if git show-ref --verify --quiet refs/remotes/origin/dev; then
            echo "📥 기존 dev 브랜치를 체크아웃합니다..."
            git checkout -B dev origin/dev
          else
            echo "🆕 새로운 dev 브랜치를 생성합니다..."
            git checkout -b dev
          fi
          
          # 소스 브랜치 결정
          source_branch="${{ needs.detect-gitflow-changes.outputs.source_branch }}"
          
          echo "🎯 동기화 소스: origin/$source_branch"
          
          # 안전성 검사: dev가 main의 조상인지 확인
          if git merge-base --is-ancestor "origin/$source_branch" HEAD; then
            echo "✅ 안전성 검사 통과: dev가 $source_branch보다 앞서 있습니다."
            echo "📊 현재 상태:"
            echo "  - $source_branch HEAD: $(git rev-parse --short origin/$source_branch)"
            echo "  - dev HEAD: $(git rev-parse --short HEAD)"
            echo ""
            echo "🔍 dev에만 있는 커밋들 (feature 작업 등):"
            git log --oneline "origin/$source_branch..HEAD" || echo "  (없음)"
            echo ""
            echo "⚠️ Fast-forward 동기화를 건너뜁니다 (feature 작업 보호)."
            echo "💡 수동으로 $source_branch의 변경사항을 dev에 머지해주세요."
            
          elif git merge-base --is-ancestor HEAD "origin/$source_branch"; then
            echo "⚡ Fast-forward 동기화가 가능합니다."
            echo "📊 동기화 전 상태:"
            echo "  - dev HEAD: $(git rev-parse --short HEAD)"
            echo "  - $source_branch HEAD: $(git rev-parse --short origin/$source_branch)"
            
            # Fast-forward 머지 실행
            git merge "origin/$source_branch" --ff-only
            
            echo "✅ Fast-forward 동기화가 완료되었습니다!"
            echo "📊 동기화 후 상태:"
            echo "  - dev HEAD: $(git rev-parse --short HEAD)"
            echo "  - 결과: Fast-forward (merge 커밋 없음)"
            
          else
            echo "🚨 브랜치가 분기되었습니다!"
            echo "📊 현재 상태:"
            echo "  - dev HEAD: $(git rev-parse --short HEAD)"
            echo "  - $source_branch HEAD: $(git rev-parse --short origin/$source_branch)"
            echo ""
            echo "🔍 dev에만 있는 커밋들:"
            git log --oneline "origin/$source_branch..HEAD" || echo "  (없음)"
            echo ""
            echo "🔍 $source_branch에만 있는 커밋들:"
            git log --oneline "HEAD..origin/$source_branch" || echo "  (없음)"
            echo ""
            echo "⚠️ 자동 동기화를 건너뜁니다 (데이터 손실 방지)."
            echo "💡 수동으로 브랜치를 머지해주세요."
            
            # 동기화 실패로 처리하지 않고 안전하게 종료
            echo "🔒 안전성을 위해 동기화를 건너뜁니다."
            exit 0
          fi

      - name: Dev 브랜치 푸시
        run: |
          # Fast-forward가 실제로 발생했는지 확인
          if git diff --quiet HEAD@{1} HEAD 2>/dev/null; then
            echo "📝 변경사항이 없어 푸시를 건너뜁니다."
          else
            echo "📤 dev 브랜치를 원격 저장소에 푸시합니다..."
            git push origin dev
            echo "✅ 푸시가 완료되었습니다!"
          fi

      - name: 동기화 결과 알림
        run: |
          echo "🎉 GitFlow 안전 동기화가 완료되었습니다!"
          echo ""
          echo "📋 동기화 요약:"
          echo "  - 타입: ${{ needs.detect-gitflow-changes.outputs.sync_type }}"
          echo "  - 소스: ${{ needs.detect-gitflow-changes.outputs.source_branch }}"
          echo "  - 대상: dev 브랜치"
          echo "  - 이유: ${{ needs.detect-gitflow-changes.outputs.sync_reason }}"
          echo "  - 방식: 안전한 Fast-forward (feature 작업 보호)"
          echo ""
          echo "🔗 브랜치 상태:"
          echo "  - dev HEAD: $(git rev-parse --short HEAD)" 